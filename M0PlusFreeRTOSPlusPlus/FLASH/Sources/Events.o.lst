   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"Events.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._Z12Cpu_OnNMIINTv,"ax",%progbits
  18              		.align	2
  19              		.global	_Z12Cpu_OnNMIINTv
  20              		.code	16
  21              		.thumb_func
  23              	_Z12Cpu_OnNMIINTv:
  24              	.LFB5:
  25              		.file 1 "../Sources/Events.c"
   1:../Sources/Events.c **** /** ###################################################################
   2:../Sources/Events.c **** **     Filename    : Events.c
   3:../Sources/Events.c **** **     Project     : ProcessorExpert
   4:../Sources/Events.c **** **     Processor   : MKL25Z128VLK4
   5:../Sources/Events.c **** **     Component   : Events
   6:../Sources/Events.c **** **     Version     : Driver 01.00
   7:../Sources/Events.c **** **     Compiler    : GNU C Compiler
   8:../Sources/Events.c **** **     Date/Time   : 2012-10-04, 09:56, # CodeGen: 0
   9:../Sources/Events.c **** **     Abstract    :
  10:../Sources/Events.c **** **         This is user's event module.
  11:../Sources/Events.c **** **         Put your event handler code here.
  12:../Sources/Events.c **** **     Settings    :
  13:../Sources/Events.c **** **     Contents    :
  14:../Sources/Events.c **** **         Cpu_OnNMIINT - void Cpu_OnNMIINT(void);
  15:../Sources/Events.c **** **
  16:../Sources/Events.c **** ** ###################################################################*/
  17:../Sources/Events.c **** /* MODULE Events */
  18:../Sources/Events.c **** 
  19:../Sources/Events.c **** #include "Cpu.h"
  20:../Sources/Events.c **** #include "Events.h"
  21:../Sources/Events.c **** 
  22:../Sources/Events.c **** /* User includes (#include below this line is not maintained by Processor Expert) */
  23:../Sources/Events.c **** 
  24:../Sources/Events.c **** /*
  25:../Sources/Events.c **** ** ===================================================================
  26:../Sources/Events.c **** **     Event       :  Cpu_OnNMIINT (module Events)
  27:../Sources/Events.c **** **
  28:../Sources/Events.c **** **     Component   :  Cpu [MKL25Z128LK4]
  29:../Sources/Events.c **** **     Description :
  30:../Sources/Events.c **** **         This event is called when the Non maskable interrupt had
  31:../Sources/Events.c **** **         occurred. This event is automatically enabled when the <NMI
  32:../Sources/Events.c **** **         interrrupt> property is set to 'Enabled'.
  33:../Sources/Events.c **** **     Parameters  : None
  34:../Sources/Events.c **** **     Returns     : Nothing
  35:../Sources/Events.c **** ** ===================================================================
  36:../Sources/Events.c **** */
  37:../Sources/Events.c **** void Cpu_OnNMIINT(void)
  38:../Sources/Events.c **** {
  26              		.loc 1 38 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 7, -8
  32              		.cfi_offset 14, -4
  33 0002 00AF     		add	r7, sp, #0
  34              	.LCFI1:
  35              		.cfi_def_cfa_register 7
  39:../Sources/Events.c ****   /* Write your code here ... */
  40:../Sources/Events.c **** }
  36              		.loc 1 40 0
  37 0004 BD46     		mov	sp, r7
  38              		@ sp needed for prologue
  39 0006 80BD     		pop	{r7, pc}
  40              		.cfi_endproc
  41              	.LFE5:
  43              		.section	.text._Z39FreeRTOS0_vApplicationStackOverflowHookPvPc,"ax",%progbits
  44              		.align	2
  45              		.global	_Z39FreeRTOS0_vApplicationStackOverflowHookPvPc
  46              		.code	16
  47              		.thumb_func
  49              	_Z39FreeRTOS0_vApplicationStackOverflowHookPvPc:
  50              	.LFB6:
  41:../Sources/Events.c **** 
  42:../Sources/Events.c **** /*
  43:../Sources/Events.c **** ** ===================================================================
  44:../Sources/Events.c **** **     Event       :  FreeRTOS0_vApplicationStackOverflowHook (module Events)
  45:../Sources/Events.c **** **
  46:../Sources/Events.c **** **     Component   :  FreeRTOS0 [FreeRTOS]
  47:../Sources/Events.c **** **     Description :
  48:../Sources/Events.c **** **         if enabled, this hook will be called in case of a stack
  49:../Sources/Events.c **** **         overflow.
  50:../Sources/Events.c **** **     Parameters  :
  51:../Sources/Events.c **** **         NAME            - DESCRIPTION
  52:../Sources/Events.c **** **         pxTask          - Task handle
  53:../Sources/Events.c **** **       * pcTaskName      - Pointer to task name
  54:../Sources/Events.c **** **     Returns     : Nothing
  55:../Sources/Events.c **** ** ===================================================================
  56:../Sources/Events.c **** */
  57:../Sources/Events.c **** void FreeRTOS0_vApplicationStackOverflowHook(xTaskHandle pxTask, char *pcTaskName)
  58:../Sources/Events.c **** {
  51              		.loc 1 58 0
  52              		.cfi_startproc
  53 0000 80B5     		push	{r7, lr}
  54              	.LCFI2:
  55              		.cfi_def_cfa_offset 8
  56              		.cfi_offset 7, -8
  57              		.cfi_offset 14, -4
  58 0002 82B0     		sub	sp, sp, #8
  59              	.LCFI3:
  60              		.cfi_def_cfa_offset 16
  61 0004 00AF     		add	r7, sp, #0
  62              	.LCFI4:
  63              		.cfi_def_cfa_register 7
  64 0006 7860     		str	r0, [r7, #4]
  65 0008 3960     		str	r1, [r7]
  59:../Sources/Events.c ****   /* This will get called if a stack overflow is detected during the context
  60:../Sources/Events.c ****      switch.  Set configCHECK_FOR_STACK_OVERFLOWS to 2 to also check for stack
  61:../Sources/Events.c ****      problems within nested interrupts, but only do this for debug purposes as
  62:../Sources/Events.c ****      it will increase the context switch time. */
  63:../Sources/Events.c ****   (void)pxTask;
  64:../Sources/Events.c ****   (void)pcTaskName;
  65:../Sources/Events.c ****   taskDISABLE_INTERRUPTS();
  66              		.loc 1 65 0
  67              	@ 65 "../Sources/Events.c" 1
  68 000a 72B6     		cpsid i
  69              	@ 0 "" 2
  70              		.code	16
  71              	.L3:
  66:../Sources/Events.c ****   /* Write your code here ... */
  67:../Sources/Events.c ****   for(;;) {}
  72              		.loc 1 67 0
  73 000c FEE7     		b	.L3
  74              		.cfi_endproc
  75              	.LFE6:
  77 000e C046     		.section	.text._Z30FreeRTOS0_vApplicationTickHookv,"ax",%progbits
  78              		.align	2
  79              		.global	_Z30FreeRTOS0_vApplicationTickHookv
  80              		.code	16
  81              		.thumb_func
  83              	_Z30FreeRTOS0_vApplicationTickHookv:
  84              	.LFB7:
  68:../Sources/Events.c **** }
  69:../Sources/Events.c **** 
  70:../Sources/Events.c **** /*
  71:../Sources/Events.c **** ** ===================================================================
  72:../Sources/Events.c **** **     Event       :  FreeRTOS0_vApplicationTickHook (module Events)
  73:../Sources/Events.c **** **
  74:../Sources/Events.c **** **     Component   :  FreeRTOS0 [FreeRTOS]
  75:../Sources/Events.c **** **     Description :
  76:../Sources/Events.c **** **         If enabled, this hook will be called by the RTOS for every
  77:../Sources/Events.c **** **         tick increment.
  78:../Sources/Events.c **** **     Parameters  : None
  79:../Sources/Events.c **** **     Returns     : Nothing
  80:../Sources/Events.c **** ** ===================================================================
  81:../Sources/Events.c **** */
  82:../Sources/Events.c **** void FreeRTOS0_vApplicationTickHook(void)
  83:../Sources/Events.c **** {
  85              		.loc 1 83 0
  86              		.cfi_startproc
  87 0000 80B5     		push	{r7, lr}
  88              	.LCFI5:
  89              		.cfi_def_cfa_offset 8
  90              		.cfi_offset 7, -8
  91              		.cfi_offset 14, -4
  92 0002 00AF     		add	r7, sp, #0
  93              	.LCFI6:
  94              		.cfi_def_cfa_register 7
  84:../Sources/Events.c ****   /* Called for every RTOS tick. */
  85:../Sources/Events.c ****   /* Write your code here ... */
  86:../Sources/Events.c **** }
  95              		.loc 1 86 0
  96 0004 BD46     		mov	sp, r7
  97              		@ sp needed for prologue
  98 0006 80BD     		pop	{r7, pc}
  99              		.cfi_endproc
 100              	.LFE7:
 102              		.section	.text._Z30FreeRTOS0_vApplicationIdleHookv,"ax",%progbits
 103              		.align	2
 104              		.global	_Z30FreeRTOS0_vApplicationIdleHookv
 105              		.code	16
 106              		.thumb_func
 108              	_Z30FreeRTOS0_vApplicationIdleHookv:
 109              	.LFB8:
  87:../Sources/Events.c **** 
  88:../Sources/Events.c **** /*
  89:../Sources/Events.c **** ** ===================================================================
  90:../Sources/Events.c **** **     Event       :  FreeRTOS0_vApplicationIdleHook (module Events)
  91:../Sources/Events.c **** **
  92:../Sources/Events.c **** **     Component   :  FreeRTOS0 [FreeRTOS]
  93:../Sources/Events.c **** **     Description :
  94:../Sources/Events.c **** **         If enabled, this hook will be called when the RTOS is idle.
  95:../Sources/Events.c **** **         This might be a good place to go into low power mode.
  96:../Sources/Events.c **** **     Parameters  : None
  97:../Sources/Events.c **** **     Returns     : Nothing
  98:../Sources/Events.c **** ** ===================================================================
  99:../Sources/Events.c **** */
 100:../Sources/Events.c **** void FreeRTOS0_vApplicationIdleHook(void)
 101:../Sources/Events.c **** {
 110              		.loc 1 101 0
 111              		.cfi_startproc
 112 0000 80B5     		push	{r7, lr}
 113              	.LCFI7:
 114              		.cfi_def_cfa_offset 8
 115              		.cfi_offset 7, -8
 116              		.cfi_offset 14, -4
 117 0002 00AF     		add	r7, sp, #0
 118              	.LCFI8:
 119              		.cfi_def_cfa_register 7
 102:../Sources/Events.c ****   /* Called whenever the RTOS is idle (from the IDLE task).
 103:../Sources/Events.c ****      Here would be a good place to put the CPU into low power mode. */
 104:../Sources/Events.c ****   /* Write your code here ... */
 105:../Sources/Events.c **** }
 120              		.loc 1 105 0
 121 0004 BD46     		mov	sp, r7
 122              		@ sp needed for prologue
 123 0006 80BD     		pop	{r7, pc}
 124              		.cfi_endproc
 125              	.LFE8:
 127              		.section	.text._Z38FreeRTOS0_vApplicationMallocFailedHookv,"ax",%progbits
 128              		.align	2
 129              		.global	_Z38FreeRTOS0_vApplicationMallocFailedHookv
 130              		.code	16
 131              		.thumb_func
 133              	_Z38FreeRTOS0_vApplicationMallocFailedHookv:
 134              	.LFB9:
 106:../Sources/Events.c **** 
 107:../Sources/Events.c **** /*
 108:../Sources/Events.c **** ** ===================================================================
 109:../Sources/Events.c **** **     Event       :  FreeRTOS0_vApplicationMallocFailedHook (module Events)
 110:../Sources/Events.c **** **
 111:../Sources/Events.c **** **     Component   :  FreeRTOS0 [FreeRTOS]
 112:../Sources/Events.c **** **     Description :
 113:../Sources/Events.c **** **         If enabled, the RTOS will call this hook in case memory
 114:../Sources/Events.c **** **         allocation failed.
 115:../Sources/Events.c **** **     Parameters  : None
 116:../Sources/Events.c **** **     Returns     : Nothing
 117:../Sources/Events.c **** ** ===================================================================
 118:../Sources/Events.c **** */
 119:../Sources/Events.c **** void FreeRTOS0_vApplicationMallocFailedHook(void)
 120:../Sources/Events.c **** {
 135              		.loc 1 120 0
 136              		.cfi_startproc
 137 0000 80B5     		push	{r7, lr}
 138              	.LCFI9:
 139              		.cfi_def_cfa_offset 8
 140              		.cfi_offset 7, -8
 141              		.cfi_offset 14, -4
 142 0002 00AF     		add	r7, sp, #0
 143              	.LCFI10:
 144              		.cfi_def_cfa_register 7
 121:../Sources/Events.c ****   /* Called if a call to pvPortMalloc() fails because there is insufficient
 122:../Sources/Events.c ****      free memory available in the FreeRTOS heap.  pvPortMalloc() is called
 123:../Sources/Events.c ****      internally by FreeRTOS API functions that create tasks, queues, software
 124:../Sources/Events.c ****      timers, and semaphores.  The size of the FreeRTOS heap is set by the
 125:../Sources/Events.c ****      configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
 126:../Sources/Events.c ****   taskDISABLE_INTERRUPTS();
 145              		.loc 1 126 0
 146              	@ 126 "../Sources/Events.c" 1
 147 0004 72B6     		cpsid i
 148              	@ 0 "" 2
 149              		.code	16
 150              	.L7:
 127:../Sources/Events.c ****   /* Write your code here ... */
 128:../Sources/Events.c ****   for(;;) {}
 151              		.loc 1 128 0
 152 0006 FEE7     		b	.L7
 153              		.cfi_endproc
 154              	.LFE9:
 156              		.section	.text._Z13Cpu_OnNMIINT0v,"ax",%progbits
 157              		.align	2
 158              		.global	_Z13Cpu_OnNMIINT0v
 159              		.code	16
 160              		.thumb_func
 162              	_Z13Cpu_OnNMIINT0v:
 163              	.LFB10:
 129:../Sources/Events.c **** }
 130:../Sources/Events.c **** 
 131:../Sources/Events.c **** /*
 132:../Sources/Events.c **** ** ===================================================================
 133:../Sources/Events.c **** **     Event       :  Cpu_OnNMIINT0 (module Events)
 134:../Sources/Events.c **** **
 135:../Sources/Events.c **** **     Component   :  Cpu [MKL25Z128LK4]
 136:../Sources/Events.c **** */
 137:../Sources/Events.c **** /*!
 138:../Sources/Events.c **** **     @brief
 139:../Sources/Events.c **** **         This event is called when the Non maskable interrupt had
 140:../Sources/Events.c **** **         occurred. This event is automatically enabled when the [NMI
 141:../Sources/Events.c **** **         interrupt] property is set to 'Enabled'.
 142:../Sources/Events.c **** */
 143:../Sources/Events.c **** /* ===================================================================*/
 144:../Sources/Events.c **** void Cpu_OnNMIINT0(void)
 145:../Sources/Events.c **** {
 164              		.loc 1 145 0
 165              		.cfi_startproc
 166 0000 80B5     		push	{r7, lr}
 167              	.LCFI11:
 168              		.cfi_def_cfa_offset 8
 169              		.cfi_offset 7, -8
 170              		.cfi_offset 14, -4
 171 0002 00AF     		add	r7, sp, #0
 172              	.LCFI12:
 173              		.cfi_def_cfa_register 7
 146:../Sources/Events.c ****   /* Write your code here ... */
 147:../Sources/Events.c **** }
 174              		.loc 1 147 0
 175 0004 BD46     		mov	sp, r7
 176              		@ sp needed for prologue
 177 0006 80BD     		pop	{r7, pc}
 178              		.cfi_endproc
 179              	.LFE10:
 181              		.section	.text._Z25I2C0_OnMasterByteReceivedPv,"ax",%progbits
 182              		.align	2
 183              		.global	_Z25I2C0_OnMasterByteReceivedPv
 184              		.code	16
 185              		.thumb_func
 187              	_Z25I2C0_OnMasterByteReceivedPv:
 188              	.LFB11:
 148:../Sources/Events.c **** 
 149:../Sources/Events.c **** /*
 150:../Sources/Events.c **** ** ===================================================================
 151:../Sources/Events.c **** **     Event       :  I2C0_OnMasterByteReceived (module Events)
 152:../Sources/Events.c **** **
 153:../Sources/Events.c **** **     Component   :  I2C0 [I2C_LDD]
 154:../Sources/Events.c **** */
 155:../Sources/Events.c **** /*!
 156:../Sources/Events.c **** **     @brief
 157:../Sources/Events.c **** **         This event is called when I2C is in master mode and finishes
 158:../Sources/Events.c **** **         the reception of the byte successfully. This event is not
 159:../Sources/Events.c **** **         available for the SLAVE mode and if MasterReceiveBlock is
 160:../Sources/Events.c **** **         disabled.
 161:../Sources/Events.c **** **     @param
 162:../Sources/Events.c **** **         UserDataPtr     - Pointer to the user or
 163:../Sources/Events.c **** **                           RTOS specific data. This pointer is passed
 164:../Sources/Events.c **** **                           as the parameter of Init method.
 165:../Sources/Events.c **** */
 166:../Sources/Events.c **** /* ===================================================================*/
 167:../Sources/Events.c **** void I2C0_OnMasterByteReceived(LDD_TUserData *UserDataPtr)
 168:../Sources/Events.c **** {
 189              		.loc 1 168 0
 190              		.cfi_startproc
 191 0000 80B5     		push	{r7, lr}
 192              	.LCFI13:
 193              		.cfi_def_cfa_offset 8
 194              		.cfi_offset 7, -8
 195              		.cfi_offset 14, -4
 196 0002 82B0     		sub	sp, sp, #8
 197              	.LCFI14:
 198              		.cfi_def_cfa_offset 16
 199 0004 00AF     		add	r7, sp, #0
 200              	.LCFI15:
 201              		.cfi_def_cfa_register 7
 202 0006 7860     		str	r0, [r7, #4]
 169:../Sources/Events.c ****   /* Write your code here ... */
 170:../Sources/Events.c **** }
 203              		.loc 1 170 0
 204 0008 BD46     		mov	sp, r7
 205 000a 02B0     		add	sp, sp, #8
 206              		@ sp needed for prologue
 207 000c 80BD     		pop	{r7, pc}
 208              		.cfi_endproc
 209              	.LFE11:
 211 000e C046     		.section	.text._Z12I2C0_OnErrorPv,"ax",%progbits
 212              		.align	2
 213              		.global	_Z12I2C0_OnErrorPv
 214              		.code	16
 215              		.thumb_func
 217              	_Z12I2C0_OnErrorPv:
 218              	.LFB12:
 171:../Sources/Events.c **** 
 172:../Sources/Events.c **** /*
 173:../Sources/Events.c **** ** ===================================================================
 174:../Sources/Events.c **** **     Event       :  I2C0_OnError (module Events)
 175:../Sources/Events.c **** **
 176:../Sources/Events.c **** **     Component   :  I2C0 [I2C_LDD]
 177:../Sources/Events.c **** */
 178:../Sources/Events.c **** /*!
 179:../Sources/Events.c **** **     @brief
 180:../Sources/Events.c **** **         This event is called when an error (e.g. Arbitration lost)
 181:../Sources/Events.c **** **         occurs. The errors can be read with GetError method.
 182:../Sources/Events.c **** **     @param
 183:../Sources/Events.c **** **         UserDataPtr     - Pointer to the user or
 184:../Sources/Events.c **** **                           RTOS specific data. This pointer is passed
 185:../Sources/Events.c **** **                           as the parameter of Init method.
 186:../Sources/Events.c **** */
 187:../Sources/Events.c **** /* ===================================================================*/
 188:../Sources/Events.c **** void I2C0_OnError(LDD_TUserData *UserDataPtr)
 189:../Sources/Events.c **** {
 219              		.loc 1 189 0
 220              		.cfi_startproc
 221 0000 80B5     		push	{r7, lr}
 222              	.LCFI16:
 223              		.cfi_def_cfa_offset 8
 224              		.cfi_offset 7, -8
 225              		.cfi_offset 14, -4
 226 0002 82B0     		sub	sp, sp, #8
 227              	.LCFI17:
 228              		.cfi_def_cfa_offset 16
 229 0004 00AF     		add	r7, sp, #0
 230              	.LCFI18:
 231              		.cfi_def_cfa_register 7
 232 0006 7860     		str	r0, [r7, #4]
 190:../Sources/Events.c ****   /* Write your code here ... */
 191:../Sources/Events.c **** }
 233              		.loc 1 191 0
 234 0008 BD46     		mov	sp, r7
 235 000a 02B0     		add	sp, sp, #8
 236              		@ sp needed for prologue
 237 000c 80BD     		pop	{r7, pc}
 238              		.cfi_endproc
 239              	.LFE12:
 241 000e C046     		.section	.text._Z22I2C0_OnBusStopDetectedPv,"ax",%progbits
 242              		.align	2
 243              		.global	_Z22I2C0_OnBusStopDetectedPv
 244              		.code	16
 245              		.thumb_func
 247              	_Z22I2C0_OnBusStopDetectedPv:
 248              	.LFB13:
 192:../Sources/Events.c **** 
 193:../Sources/Events.c **** /*
 194:../Sources/Events.c **** ** ===================================================================
 195:../Sources/Events.c **** **     Event       :  I2C0_OnBusStopDetected (module Events)
 196:../Sources/Events.c **** **
 197:../Sources/Events.c **** **     Component   :  I2C0 [I2C_LDD]
 198:../Sources/Events.c **** */
 199:../Sources/Events.c **** /*!
 200:../Sources/Events.c **** **     @brief
 201:../Sources/Events.c **** **         This event is called when the I2C device detected bus stop
 202:../Sources/Events.c **** **         condition.
 203:../Sources/Events.c **** **     @param
 204:../Sources/Events.c **** **         UserDataPtr     - Pointer to the user or
 205:../Sources/Events.c **** **                           RTOS specific data. This pointer is passed
 206:../Sources/Events.c **** **                           as the parameter of Init method.
 207:../Sources/Events.c **** */
 208:../Sources/Events.c **** /* ===================================================================*/
 209:../Sources/Events.c **** void I2C0_OnBusStopDetected(LDD_TUserData *UserDataPtr)
 210:../Sources/Events.c **** {
 249              		.loc 1 210 0
 250              		.cfi_startproc
 251 0000 80B5     		push	{r7, lr}
 252              	.LCFI19:
 253              		.cfi_def_cfa_offset 8
 254              		.cfi_offset 7, -8
 255              		.cfi_offset 14, -4
 256 0002 82B0     		sub	sp, sp, #8
 257              	.LCFI20:
 258              		.cfi_def_cfa_offset 16
 259 0004 00AF     		add	r7, sp, #0
 260              	.LCFI21:
 261              		.cfi_def_cfa_register 7
 262 0006 7860     		str	r0, [r7, #4]
 211:../Sources/Events.c ****   /* Write your code here ... */
 212:../Sources/Events.c **** }
 263              		.loc 1 212 0
 264 0008 BD46     		mov	sp, r7
 265 000a 02B0     		add	sp, sp, #8
 266              		@ sp needed for prologue
 267 000c 80BD     		pop	{r7, pc}
 268              		.cfi_endproc
 269              	.LFE13:
 271 000e C046     		.text
 272              	.Letext0:
 273              		.file 2 "C:/Users/Judah/Documents/GitHub/M0PlusFreeRTOS/M0PlusFreeRTOSPlusPlus/Generated_Code/PE_T
 274              		.file 3 "C:/Users/Judah/Documents/GitHub/M0PlusFreeRTOS/M0PlusFreeRTOSPlusPlus/Generated_Code/task
DEFINED SYMBOLS
                            *ABS*:00000000 Events.c
C:\Users\Judah\AppData\Local\Temp\ccAOgrST.s:18     .text._Z12Cpu_OnNMIINTv:00000000 $t
C:\Users\Judah\AppData\Local\Temp\ccAOgrST.s:23     .text._Z12Cpu_OnNMIINTv:00000000 _Z12Cpu_OnNMIINTv
C:\Users\Judah\AppData\Local\Temp\ccAOgrST.s:44     .text._Z39FreeRTOS0_vApplicationStackOverflowHookPvPc:00000000 $t
C:\Users\Judah\AppData\Local\Temp\ccAOgrST.s:49     .text._Z39FreeRTOS0_vApplicationStackOverflowHookPvPc:00000000 _Z39FreeRTOS0_vApplicationStackOverflowHookPvPc
C:\Users\Judah\AppData\Local\Temp\ccAOgrST.s:78     .text._Z30FreeRTOS0_vApplicationTickHookv:00000000 $t
C:\Users\Judah\AppData\Local\Temp\ccAOgrST.s:83     .text._Z30FreeRTOS0_vApplicationTickHookv:00000000 _Z30FreeRTOS0_vApplicationTickHookv
C:\Users\Judah\AppData\Local\Temp\ccAOgrST.s:103    .text._Z30FreeRTOS0_vApplicationIdleHookv:00000000 $t
C:\Users\Judah\AppData\Local\Temp\ccAOgrST.s:108    .text._Z30FreeRTOS0_vApplicationIdleHookv:00000000 _Z30FreeRTOS0_vApplicationIdleHookv
C:\Users\Judah\AppData\Local\Temp\ccAOgrST.s:128    .text._Z38FreeRTOS0_vApplicationMallocFailedHookv:00000000 $t
C:\Users\Judah\AppData\Local\Temp\ccAOgrST.s:133    .text._Z38FreeRTOS0_vApplicationMallocFailedHookv:00000000 _Z38FreeRTOS0_vApplicationMallocFailedHookv
C:\Users\Judah\AppData\Local\Temp\ccAOgrST.s:157    .text._Z13Cpu_OnNMIINT0v:00000000 $t
C:\Users\Judah\AppData\Local\Temp\ccAOgrST.s:162    .text._Z13Cpu_OnNMIINT0v:00000000 _Z13Cpu_OnNMIINT0v
C:\Users\Judah\AppData\Local\Temp\ccAOgrST.s:182    .text._Z25I2C0_OnMasterByteReceivedPv:00000000 $t
C:\Users\Judah\AppData\Local\Temp\ccAOgrST.s:187    .text._Z25I2C0_OnMasterByteReceivedPv:00000000 _Z25I2C0_OnMasterByteReceivedPv
C:\Users\Judah\AppData\Local\Temp\ccAOgrST.s:212    .text._Z12I2C0_OnErrorPv:00000000 $t
C:\Users\Judah\AppData\Local\Temp\ccAOgrST.s:217    .text._Z12I2C0_OnErrorPv:00000000 _Z12I2C0_OnErrorPv
C:\Users\Judah\AppData\Local\Temp\ccAOgrST.s:242    .text._Z22I2C0_OnBusStopDetectedPv:00000000 $t
C:\Users\Judah\AppData\Local\Temp\ccAOgrST.s:247    .text._Z22I2C0_OnBusStopDetectedPv:00000000 _Z22I2C0_OnBusStopDetectedPv
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
