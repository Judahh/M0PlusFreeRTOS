   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"PwmLdd1.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.bss._ZL33DeviceDataPrv__DEFAULT_RTOS_ALLOC,"aw",%nobits
  18              		.align	2
  21              	_ZL33DeviceDataPrv__DEFAULT_RTOS_ALLOC:
  22 0000 00000000 		.space	12
  22      00000000 
  22      00000000 
  23              		.section	.text.PwmLdd1_Init,"ax",%progbits
  24              		.align	2
  25              		.global	PwmLdd1_Init
  26              		.code	16
  27              		.thumb_func
  29              	PwmLdd1_Init:
  30              	.LFB0:
  31              		.file 1 "../Generated_Code/PwmLdd1.c"
   1:../Generated_Code/PwmLdd1.c **** /* ###################################################################
   2:../Generated_Code/PwmLdd1.c **** **     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
   3:../Generated_Code/PwmLdd1.c **** **     Filename    : PwmLdd1.c
   4:../Generated_Code/PwmLdd1.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/PwmLdd1.c **** **     Processor   : MKL25Z128VLK4
   6:../Generated_Code/PwmLdd1.c **** **     Component   : PWM_LDD
   7:../Generated_Code/PwmLdd1.c **** **     Version     : Component 01.013, Driver 01.03, CPU db: 3.00.000
   8:../Generated_Code/PwmLdd1.c **** **     Compiler    : GNU C Compiler
   9:../Generated_Code/PwmLdd1.c **** **     Date/Time   : 2014-04-05, 16:00, # CodeGen: 8
  10:../Generated_Code/PwmLdd1.c **** **     Abstract    :
  11:../Generated_Code/PwmLdd1.c **** **          This component implements a pulse-width modulation generator
  12:../Generated_Code/PwmLdd1.c **** **          that generates signal with variable duty and fixed cycle.
  13:../Generated_Code/PwmLdd1.c **** **          This PWM component provides a high level API for unified
  14:../Generated_Code/PwmLdd1.c **** **          hardware access to various timer devices using the TimerUnit
  15:../Generated_Code/PwmLdd1.c **** **          component.
  16:../Generated_Code/PwmLdd1.c **** **     Settings    :
  17:../Generated_Code/PwmLdd1.c **** **          Component name                                 : PwmLdd1
  18:../Generated_Code/PwmLdd1.c **** **          Period device                                  : TPM0_MOD
  19:../Generated_Code/PwmLdd1.c **** **          Duty device                                    : TPM0_C1V
  20:../Generated_Code/PwmLdd1.c **** **          Output pin                                     : ADC0_SE5b/PTD1/SPI0_SCK/TPM0_CH1
  21:../Generated_Code/PwmLdd1.c **** **          Output pin signal                              : 
  22:../Generated_Code/PwmLdd1.c **** **          Counter                                        : TPM0_CNT
  23:../Generated_Code/PwmLdd1.c **** **          Interrupt service/event                        : Disabled
  24:../Generated_Code/PwmLdd1.c **** **          Period                                         : 6.25 ms
  25:../Generated_Code/PwmLdd1.c **** **          Starting pulse width                           : 0 ms
  26:../Generated_Code/PwmLdd1.c **** **          Initial polarity                               : low
  27:../Generated_Code/PwmLdd1.c **** **          Initialization                                 : 
  28:../Generated_Code/PwmLdd1.c **** **            Enabled in init. code                        : yes
  29:../Generated_Code/PwmLdd1.c **** **            Auto initialization                          : yes
  30:../Generated_Code/PwmLdd1.c **** **            Event mask                                   : 
  31:../Generated_Code/PwmLdd1.c **** **              OnEnd                                      : Disabled
  32:../Generated_Code/PwmLdd1.c **** **          CPU clock/configuration selection              : 
  33:../Generated_Code/PwmLdd1.c **** **            Clock configuration 0                        : This component enabled
  34:../Generated_Code/PwmLdd1.c **** **            Clock configuration 1                        : This component disabled
  35:../Generated_Code/PwmLdd1.c **** **            Clock configuration 2                        : This component disabled
  36:../Generated_Code/PwmLdd1.c **** **            Clock configuration 3                        : This component disabled
  37:../Generated_Code/PwmLdd1.c **** **            Clock configuration 4                        : This component disabled
  38:../Generated_Code/PwmLdd1.c **** **            Clock configuration 5                        : This component disabled
  39:../Generated_Code/PwmLdd1.c **** **            Clock configuration 6                        : This component disabled
  40:../Generated_Code/PwmLdd1.c **** **            Clock configuration 7                        : This component disabled
  41:../Generated_Code/PwmLdd1.c **** **          Referenced components                          : 
  42:../Generated_Code/PwmLdd1.c **** **            Linked component                             : TU0
  43:../Generated_Code/PwmLdd1.c **** **     Contents    :
  44:../Generated_Code/PwmLdd1.c **** **         Init       - LDD_TDeviceData* PwmLdd1_Init(LDD_TUserData *UserDataPtr);
  45:../Generated_Code/PwmLdd1.c **** **         SetRatio8  - LDD_TError PwmLdd1_SetRatio8(LDD_TDeviceData *DeviceDataPtr, uint8_t Ratio)
  46:../Generated_Code/PwmLdd1.c **** **         SetRatio16 - LDD_TError PwmLdd1_SetRatio16(LDD_TDeviceData *DeviceDataPtr, uint16_t Rati
  47:../Generated_Code/PwmLdd1.c **** **         SetDutyUS  - LDD_TError PwmLdd1_SetDutyUS(LDD_TDeviceData *DeviceDataPtr, uint16_t Time)
  48:../Generated_Code/PwmLdd1.c **** **         SetDutyMS  - LDD_TError PwmLdd1_SetDutyMS(LDD_TDeviceData *DeviceDataPtr, uint16_t Time)
  49:../Generated_Code/PwmLdd1.c **** **
  50:../Generated_Code/PwmLdd1.c **** **     Copyright : 1997 - 2013 Freescale Semiconductor, Inc. All Rights Reserved.
  51:../Generated_Code/PwmLdd1.c **** **     SOURCE DISTRIBUTION PERMISSIBLE as directed in End User License Agreement.
  52:../Generated_Code/PwmLdd1.c **** **     
  53:../Generated_Code/PwmLdd1.c **** **     http      : www.freescale.com
  54:../Generated_Code/PwmLdd1.c **** **     mail      : support@freescale.com
  55:../Generated_Code/PwmLdd1.c **** ** ###################################################################*/
  56:../Generated_Code/PwmLdd1.c **** /*!
  57:../Generated_Code/PwmLdd1.c **** ** @file PwmLdd1.c
  58:../Generated_Code/PwmLdd1.c **** ** @version 01.03
  59:../Generated_Code/PwmLdd1.c **** ** @brief
  60:../Generated_Code/PwmLdd1.c **** **          This component implements a pulse-width modulation generator
  61:../Generated_Code/PwmLdd1.c **** **          that generates signal with variable duty and fixed cycle.
  62:../Generated_Code/PwmLdd1.c **** **          This PWM component provides a high level API for unified
  63:../Generated_Code/PwmLdd1.c **** **          hardware access to various timer devices using the TimerUnit
  64:../Generated_Code/PwmLdd1.c **** **          component.
  65:../Generated_Code/PwmLdd1.c **** */         
  66:../Generated_Code/PwmLdd1.c **** /*!
  67:../Generated_Code/PwmLdd1.c **** **  @addtogroup PwmLdd1_module PwmLdd1 module documentation
  68:../Generated_Code/PwmLdd1.c **** **  @{
  69:../Generated_Code/PwmLdd1.c **** */         
  70:../Generated_Code/PwmLdd1.c **** 
  71:../Generated_Code/PwmLdd1.c **** /* MODULE PwmLdd1. */
  72:../Generated_Code/PwmLdd1.c **** 
  73:../Generated_Code/PwmLdd1.c **** #include "PwmLdd1.h"
  74:../Generated_Code/PwmLdd1.c **** #include "FreeRTOS.h" /* FreeRTOS interface */
  75:../Generated_Code/PwmLdd1.c **** 
  76:../Generated_Code/PwmLdd1.c **** #ifdef __cplusplus
  77:../Generated_Code/PwmLdd1.c **** extern "C" {
  78:../Generated_Code/PwmLdd1.c **** #endif 
  79:../Generated_Code/PwmLdd1.c **** 
  80:../Generated_Code/PwmLdd1.c **** typedef struct {
  81:../Generated_Code/PwmLdd1.c ****   LDD_TDeviceData *LinkedDeviceDataPtr;
  82:../Generated_Code/PwmLdd1.c ****   bool EnUser;                         /* Enable/Disable device */
  83:../Generated_Code/PwmLdd1.c ****   uint16_t RatioStore;                 /* Ratio of L-level to H-level */
  84:../Generated_Code/PwmLdd1.c ****   LDD_TUserData *UserDataPtr;          /* RTOS device data structure */
  85:../Generated_Code/PwmLdd1.c **** } PwmLdd1_TDeviceData;
  86:../Generated_Code/PwmLdd1.c **** 
  87:../Generated_Code/PwmLdd1.c **** typedef PwmLdd1_TDeviceData *PwmLdd1_TDeviceDataPtr; /* Pointer to the device data structure. */
  88:../Generated_Code/PwmLdd1.c **** 
  89:../Generated_Code/PwmLdd1.c **** /* {FreeRTOS RTOS Adapter} Static object used for simulation of dynamic driver memory allocation */
  90:../Generated_Code/PwmLdd1.c **** static PwmLdd1_TDeviceData DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  91:../Generated_Code/PwmLdd1.c **** 
  92:../Generated_Code/PwmLdd1.c **** #define CHANNEL 0x00U
  93:../Generated_Code/PwmLdd1.c **** /* Internal method prototypes */
  94:../Generated_Code/PwmLdd1.c **** static void SetRatio(LDD_TDeviceData *DeviceDataPtr);
  95:../Generated_Code/PwmLdd1.c **** /*
  96:../Generated_Code/PwmLdd1.c **** ** ===================================================================
  97:../Generated_Code/PwmLdd1.c **** **     Method      :  PwmLdd1_Init (component PWM_LDD)
  98:../Generated_Code/PwmLdd1.c **** */
  99:../Generated_Code/PwmLdd1.c **** /*!
 100:../Generated_Code/PwmLdd1.c **** **     @brief
 101:../Generated_Code/PwmLdd1.c **** **         Initializes the device. Allocates memory for the device data
 102:../Generated_Code/PwmLdd1.c **** **         structure, allocates interrupt vectors and sets interrupt
 103:../Generated_Code/PwmLdd1.c **** **         priority, sets pin routing, sets timing, etc. If the
 104:../Generated_Code/PwmLdd1.c **** **         property ["Enable in init. code"] is set to "yes" value then
 105:../Generated_Code/PwmLdd1.c **** **         the device is also enabled (see the description of the
 106:../Generated_Code/PwmLdd1.c **** **         [Enable] method). In this case the [Enable] method is not
 107:../Generated_Code/PwmLdd1.c **** **         necessary and needn't to be generated. This method can be
 108:../Generated_Code/PwmLdd1.c **** **         called only once. Before the second call of Init the [Deinit]
 109:../Generated_Code/PwmLdd1.c **** **         must be called first.
 110:../Generated_Code/PwmLdd1.c **** **     @param
 111:../Generated_Code/PwmLdd1.c **** **         UserDataPtr     - Pointer to the user or
 112:../Generated_Code/PwmLdd1.c **** **                           RTOS specific data. This pointer will be
 113:../Generated_Code/PwmLdd1.c **** **                           passed as an event or callback parameter.
 114:../Generated_Code/PwmLdd1.c **** **     @return
 115:../Generated_Code/PwmLdd1.c **** **                         - Pointer to the dynamically allocated private
 116:../Generated_Code/PwmLdd1.c **** **                           structure or NULL if there was an error.
 117:../Generated_Code/PwmLdd1.c **** */
 118:../Generated_Code/PwmLdd1.c **** /* ===================================================================*/
 119:../Generated_Code/PwmLdd1.c **** LDD_TDeviceData* PwmLdd1_Init(LDD_TUserData *UserDataPtr)
 120:../Generated_Code/PwmLdd1.c **** {
  32              		.loc 1 120 0
  33              		.cfi_startproc
  34 0000 80B5     		push	{r7, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 84B0     		sub	sp, sp, #16
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 24
  42 0004 00AF     		add	r7, sp, #0
  43              	.LCFI2:
  44              		.cfi_def_cfa_register 7
  45 0006 7860     		str	r0, [r7, #4]
  46              	.LBB2:
 121:../Generated_Code/PwmLdd1.c ****   /* Allocate device structure */
 122:../Generated_Code/PwmLdd1.c ****   PwmLdd1_TDeviceData *DeviceDataPrv;
 123:../Generated_Code/PwmLdd1.c ****   /* {FreeRTOS RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer
 124:../Generated_Code/PwmLdd1.c ****   DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  47              		.loc 1 124 0
  48 0008 104B     		ldr	r3, .L4
  49 000a FB60     		str	r3, [r7, #12]
 125:../Generated_Code/PwmLdd1.c ****   DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  50              		.loc 1 125 0
  51 000c FB68     		ldr	r3, [r7, #12]
  52 000e 7A68     		ldr	r2, [r7, #4]
  53 0010 9A60     		str	r2, [r3, #8]
 126:../Generated_Code/PwmLdd1.c ****   DeviceDataPrv->EnUser = TRUE;        /* Set the flag "device enabled" */
  54              		.loc 1 126 0
  55 0012 FB68     		ldr	r3, [r7, #12]
  56 0014 0122     		mov	r2, #1
  57 0016 1A71     		strb	r2, [r3, #4]
 127:../Generated_Code/PwmLdd1.c ****   DeviceDataPrv->RatioStore = 0x00U;   /* Ratio after initialization */
  58              		.loc 1 127 0
  59 0018 FB68     		ldr	r3, [r7, #12]
  60 001a 0022     		mov	r2, #0
  61 001c DA80     		strh	r2, [r3, #6]
 128:../Generated_Code/PwmLdd1.c ****   /* Registration of the device structure */
 129:../Generated_Code/PwmLdd1.c ****   PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_PwmLdd1_ID,DeviceDataPrv);
  62              		.loc 1 129 0
  63 001e 0C4B     		ldr	r3, .L4+4
  64 0020 FA68     		ldr	r2, [r7, #12]
  65 0022 9A60     		str	r2, [r3, #8]
 130:../Generated_Code/PwmLdd1.c ****   DeviceDataPrv->LinkedDeviceDataPtr = TU0_Init((LDD_TUserData *)NULL);
  66              		.loc 1 130 0
  67 0024 0020     		mov	r0, #0
  68 0026 FFF7FEFF 		bl	TU0_Init
  69 002a 021C     		mov	r2, r0
  70 002c FB68     		ldr	r3, [r7, #12]
  71 002e 1A60     		str	r2, [r3]
 131:../Generated_Code/PwmLdd1.c ****   if (DeviceDataPrv->LinkedDeviceDataPtr == NULL) { /* Is initialization of TimerUnit unsuccessful?
  72              		.loc 1 131 0
  73 0030 FB68     		ldr	r3, [r7, #12]
  74 0032 1B68     		ldr	r3, [r3]
  75 0034 002B     		cmp	r3, #0
  76 0036 04D1     		bne	.L2
 132:../Generated_Code/PwmLdd1.c ****     /* Unregistration of the device structure */
 133:../Generated_Code/PwmLdd1.c ****     PE_LDD_UnregisterDeviceStructure(PE_LDD_COMPONENT_PwmLdd1_ID);
  77              		.loc 1 133 0
  78 0038 054B     		ldr	r3, .L4+4
  79 003a 0022     		mov	r2, #0
  80 003c 9A60     		str	r2, [r3, #8]
 134:../Generated_Code/PwmLdd1.c ****     /* Deallocation of the device structure */
 135:../Generated_Code/PwmLdd1.c ****     /* {FreeRTOS RTOS Adapter} Driver memory deallocation: Dynamic allocation is simulated, no deal
 136:../Generated_Code/PwmLdd1.c ****     return NULL;                       /* If so, then the PWM initialization is also unsuccessful *
  81              		.loc 1 136 0
  82 003e 0023     		mov	r3, #0
  83 0040 00E0     		b	.L3
  84              	.L2:
 137:../Generated_Code/PwmLdd1.c ****   }
 138:../Generated_Code/PwmLdd1.c ****   return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
  85              		.loc 1 138 0
  86 0042 FB68     		ldr	r3, [r7, #12]
  87              	.L3:
  88              	.LBE2:
 139:../Generated_Code/PwmLdd1.c **** }
  89              		.loc 1 139 0
  90 0044 181C     		mov	r0, r3
  91 0046 BD46     		mov	sp, r7
  92 0048 04B0     		add	sp, sp, #16
  93              		@ sp needed for prologue
  94 004a 80BD     		pop	{r7, pc}
  95              	.L5:
  96              		.align	2
  97              	.L4:
  98 004c 00000000 		.word	_ZL33DeviceDataPrv__DEFAULT_RTOS_ALLOC
  99 0050 00000000 		.word	PE_LDD_DeviceDataList
 100              		.cfi_endproc
 101              	.LFE0:
 103              		.section	.text.PwmLdd1_SetRatio8,"ax",%progbits
 104              		.align	2
 105              		.global	PwmLdd1_SetRatio8
 106              		.code	16
 107              		.thumb_func
 109              	PwmLdd1_SetRatio8:
 110              	.LFB1:
 140:../Generated_Code/PwmLdd1.c **** 
 141:../Generated_Code/PwmLdd1.c **** /*
 142:../Generated_Code/PwmLdd1.c **** ** ===================================================================
 143:../Generated_Code/PwmLdd1.c **** **     Method      :  PwmLdd1_SetRatio8 (component PWM_LDD)
 144:../Generated_Code/PwmLdd1.c **** */
 145:../Generated_Code/PwmLdd1.c **** /*!
 146:../Generated_Code/PwmLdd1.c **** **     @brief
 147:../Generated_Code/PwmLdd1.c **** **         This method sets a new duty-cycle ratio. Ratio is expressed
 148:../Generated_Code/PwmLdd1.c **** **         as an 8-bit unsigned integer number. 0 - FF value is
 149:../Generated_Code/PwmLdd1.c **** **         proportional to ratio 0 - 100%. The method is available
 150:../Generated_Code/PwmLdd1.c **** **         only if it is not selected list of predefined values in
 151:../Generated_Code/PwmLdd1.c **** **         [Starting pulse width] property. 
 152:../Generated_Code/PwmLdd1.c **** **         Note: Calculated duty depends on the timer capabilities and
 153:../Generated_Code/PwmLdd1.c **** **         on the selected period.
 154:../Generated_Code/PwmLdd1.c **** **     @param
 155:../Generated_Code/PwmLdd1.c **** **         DeviceDataPtr   - Device data structure
 156:../Generated_Code/PwmLdd1.c **** **                           pointer returned by [Init] method.
 157:../Generated_Code/PwmLdd1.c **** **     @param
 158:../Generated_Code/PwmLdd1.c **** **         Ratio           - Ratio to set. 0 - 255 value is
 159:../Generated_Code/PwmLdd1.c **** **                           proportional to ratio 0 - 100%
 160:../Generated_Code/PwmLdd1.c **** **     @return
 161:../Generated_Code/PwmLdd1.c **** **                         - Error code, possible codes:
 162:../Generated_Code/PwmLdd1.c **** **                           ERR_OK - OK
 163:../Generated_Code/PwmLdd1.c **** **                           ERR_SPEED - The component does not work in
 164:../Generated_Code/PwmLdd1.c **** **                           the active clock configuration
 165:../Generated_Code/PwmLdd1.c **** */
 166:../Generated_Code/PwmLdd1.c **** /* ===================================================================*/
 167:../Generated_Code/PwmLdd1.c **** LDD_TError PwmLdd1_SetRatio8(LDD_TDeviceData *DeviceDataPtr, uint8_t Ratio)
 168:../Generated_Code/PwmLdd1.c **** {
 111              		.loc 1 168 0
 112              		.cfi_startproc
 113 0000 80B5     		push	{r7, lr}
 114              	.LCFI3:
 115              		.cfi_def_cfa_offset 8
 116              		.cfi_offset 7, -8
 117              		.cfi_offset 14, -4
 118 0002 84B0     		sub	sp, sp, #16
 119              	.LCFI4:
 120              		.cfi_def_cfa_offset 24
 121 0004 00AF     		add	r7, sp, #0
 122              	.LCFI5:
 123              		.cfi_def_cfa_register 7
 124 0006 7860     		str	r0, [r7, #4]
 125 0008 0A1C     		mov	r2, r1
 126 000a FB1C     		add	r3, r7, #3
 127 000c 1A70     		strb	r2, [r3]
 128              	.LBB3:
 169:../Generated_Code/PwmLdd1.c ****   PwmLdd1_TDeviceData *DeviceDataPrv = (PwmLdd1_TDeviceData *)DeviceDataPtr;
 129              		.loc 1 169 0
 130 000e 7B68     		ldr	r3, [r7, #4]
 131 0010 FB60     		str	r3, [r7, #12]
 170:../Generated_Code/PwmLdd1.c **** 
 171:../Generated_Code/PwmLdd1.c ****   DeviceDataPrv->RatioStore = (uint16_t)Ratio << 8U; /* Store new value of the ratio */
 132              		.loc 1 171 0
 133 0012 FB1C     		add	r3, r7, #3
 134 0014 1B78     		ldrb	r3, [r3]
 135 0016 9BB2     		uxth	r3, r3
 136 0018 1B02     		lsl	r3, r3, #8
 137 001a 9AB2     		uxth	r2, r3
 138 001c FB68     		ldr	r3, [r7, #12]
 139 001e DA80     		strh	r2, [r3, #6]
 172:../Generated_Code/PwmLdd1.c ****   SetRatio(DeviceDataPtr);
 140              		.loc 1 172 0
 141 0020 7B68     		ldr	r3, [r7, #4]
 142 0022 181C     		mov	r0, r3
 143 0024 FFF7FEFF 		bl	SetRatio
 173:../Generated_Code/PwmLdd1.c ****   return ERR_OK;
 144              		.loc 1 173 0
 145 0028 0023     		mov	r3, #0
 146              	.LBE3:
 174:../Generated_Code/PwmLdd1.c **** }
 147              		.loc 1 174 0
 148 002a 181C     		mov	r0, r3
 149 002c BD46     		mov	sp, r7
 150 002e 04B0     		add	sp, sp, #16
 151              		@ sp needed for prologue
 152 0030 80BD     		pop	{r7, pc}
 153              		.cfi_endproc
 154              	.LFE1:
 156 0032 C046     		.section	.text.PwmLdd1_SetRatio16,"ax",%progbits
 157              		.align	2
 158              		.global	PwmLdd1_SetRatio16
 159              		.code	16
 160              		.thumb_func
 162              	PwmLdd1_SetRatio16:
 163              	.LFB2:
 175:../Generated_Code/PwmLdd1.c **** 
 176:../Generated_Code/PwmLdd1.c **** /*
 177:../Generated_Code/PwmLdd1.c **** ** ===================================================================
 178:../Generated_Code/PwmLdd1.c **** **     Method      :  PwmLdd1_SetRatio16 (component PWM_LDD)
 179:../Generated_Code/PwmLdd1.c **** */
 180:../Generated_Code/PwmLdd1.c **** /*!
 181:../Generated_Code/PwmLdd1.c **** **     @brief
 182:../Generated_Code/PwmLdd1.c **** **         This method sets a new duty-cycle ratio. Ratio is expressed
 183:../Generated_Code/PwmLdd1.c **** **         as a 16-bit unsigned integer number. 0 - FFFF value is
 184:../Generated_Code/PwmLdd1.c **** **         proportional to ratio 0 - 100%. The method is available
 185:../Generated_Code/PwmLdd1.c **** **         only if it is not selected list of predefined values in
 186:../Generated_Code/PwmLdd1.c **** **         [Starting pulse width] property. 
 187:../Generated_Code/PwmLdd1.c **** **         Note: Calculated duty depends on the timer possibilities and
 188:../Generated_Code/PwmLdd1.c **** **         on the selected period.
 189:../Generated_Code/PwmLdd1.c **** **     @param
 190:../Generated_Code/PwmLdd1.c **** **         DeviceDataPtr   - Device data structure
 191:../Generated_Code/PwmLdd1.c **** **                           pointer returned by [Init] method.
 192:../Generated_Code/PwmLdd1.c **** **     @param
 193:../Generated_Code/PwmLdd1.c **** **         Ratio           - Ratio to set. 0 - 65535 value is
 194:../Generated_Code/PwmLdd1.c **** **                           proportional to ratio 0 - 100%
 195:../Generated_Code/PwmLdd1.c **** **     @return
 196:../Generated_Code/PwmLdd1.c **** **                         - Error code, possible codes:
 197:../Generated_Code/PwmLdd1.c **** **                           ERR_OK - OK
 198:../Generated_Code/PwmLdd1.c **** **                           ERR_SPEED - The component does not work in
 199:../Generated_Code/PwmLdd1.c **** **                           the active clock configuration
 200:../Generated_Code/PwmLdd1.c **** */
 201:../Generated_Code/PwmLdd1.c **** /* ===================================================================*/
 202:../Generated_Code/PwmLdd1.c **** LDD_TError PwmLdd1_SetRatio16(LDD_TDeviceData *DeviceDataPtr, uint16_t Ratio)
 203:../Generated_Code/PwmLdd1.c **** {
 164              		.loc 1 203 0
 165              		.cfi_startproc
 166 0000 80B5     		push	{r7, lr}
 167              	.LCFI6:
 168              		.cfi_def_cfa_offset 8
 169              		.cfi_offset 7, -8
 170              		.cfi_offset 14, -4
 171 0002 84B0     		sub	sp, sp, #16
 172              	.LCFI7:
 173              		.cfi_def_cfa_offset 24
 174 0004 00AF     		add	r7, sp, #0
 175              	.LCFI8:
 176              		.cfi_def_cfa_register 7
 177 0006 7860     		str	r0, [r7, #4]
 178 0008 0A1C     		mov	r2, r1
 179 000a BB1C     		add	r3, r7, #2
 180 000c 1A80     		strh	r2, [r3]
 181              	.LBB4:
 204:../Generated_Code/PwmLdd1.c ****   PwmLdd1_TDeviceData *DeviceDataPrv = (PwmLdd1_TDeviceData *)DeviceDataPtr;
 182              		.loc 1 204 0
 183 000e 7B68     		ldr	r3, [r7, #4]
 184 0010 FB60     		str	r3, [r7, #12]
 205:../Generated_Code/PwmLdd1.c **** 
 206:../Generated_Code/PwmLdd1.c ****   DeviceDataPrv->RatioStore = Ratio;   /* Store new value of the ratio */
 185              		.loc 1 206 0
 186 0012 FB68     		ldr	r3, [r7, #12]
 187 0014 BA1C     		add	r2, r7, #2
 188 0016 1288     		ldrh	r2, [r2]
 189 0018 DA80     		strh	r2, [r3, #6]
 207:../Generated_Code/PwmLdd1.c ****   SetRatio(DeviceDataPtr);
 190              		.loc 1 207 0
 191 001a 7B68     		ldr	r3, [r7, #4]
 192 001c 181C     		mov	r0, r3
 193 001e FFF7FEFF 		bl	SetRatio
 208:../Generated_Code/PwmLdd1.c ****   return ERR_OK;
 194              		.loc 1 208 0
 195 0022 0023     		mov	r3, #0
 196              	.LBE4:
 209:../Generated_Code/PwmLdd1.c **** }
 197              		.loc 1 209 0
 198 0024 181C     		mov	r0, r3
 199 0026 BD46     		mov	sp, r7
 200 0028 04B0     		add	sp, sp, #16
 201              		@ sp needed for prologue
 202 002a 80BD     		pop	{r7, pc}
 203              		.cfi_endproc
 204              	.LFE2:
 206              		.global	__aeabi_i2f
 207              		.global	__aeabi_fmul
 208              		.global	__aeabi_fcmpgt
 209              		.global	__aeabi_f2uiz
 210              		.section	.text.PwmLdd1_SetDutyUS,"ax",%progbits
 211              		.align	2
 212              		.global	PwmLdd1_SetDutyUS
 213              		.code	16
 214              		.thumb_func
 216              	PwmLdd1_SetDutyUS:
 217              	.LFB3:
 210:../Generated_Code/PwmLdd1.c **** 
 211:../Generated_Code/PwmLdd1.c **** /*
 212:../Generated_Code/PwmLdd1.c **** ** ===================================================================
 213:../Generated_Code/PwmLdd1.c **** **     Method      :  PwmLdd1_SetDutyUS (component PWM_LDD)
 214:../Generated_Code/PwmLdd1.c **** */
 215:../Generated_Code/PwmLdd1.c **** /*!
 216:../Generated_Code/PwmLdd1.c **** **     @brief
 217:../Generated_Code/PwmLdd1.c **** **         This method sets the new duty value of the output signal.
 218:../Generated_Code/PwmLdd1.c **** **         The duty is expressed in microseconds as a 16-bit unsigned
 219:../Generated_Code/PwmLdd1.c **** **         integer number. The method is available only if it is not
 220:../Generated_Code/PwmLdd1.c **** **         selected list of predefined values in [Starting pulse width]
 221:../Generated_Code/PwmLdd1.c **** **         property.
 222:../Generated_Code/PwmLdd1.c **** **     @param
 223:../Generated_Code/PwmLdd1.c **** **         DeviceDataPtr   - Device data structure
 224:../Generated_Code/PwmLdd1.c **** **                           pointer returned by [Init] method.
 225:../Generated_Code/PwmLdd1.c **** **     @param
 226:../Generated_Code/PwmLdd1.c **** **         Time            - Duty to set [in microseconds]
 227:../Generated_Code/PwmLdd1.c **** **     @return
 228:../Generated_Code/PwmLdd1.c **** **                         - Error code, possible codes:
 229:../Generated_Code/PwmLdd1.c **** **                           ERR_OK - OK
 230:../Generated_Code/PwmLdd1.c **** **                           ERR_SPEED - The component does not work in
 231:../Generated_Code/PwmLdd1.c **** **                           the active clock configuration
 232:../Generated_Code/PwmLdd1.c **** **                           ERR_MATH - Overflow during evaluation
 233:../Generated_Code/PwmLdd1.c **** **                           ERR_PARAM_RANGE - Parameter out of range
 234:../Generated_Code/PwmLdd1.c **** */
 235:../Generated_Code/PwmLdd1.c **** /* ===================================================================*/
 236:../Generated_Code/PwmLdd1.c **** LDD_TError PwmLdd1_SetDutyUS(LDD_TDeviceData *DeviceDataPtr, uint16_t Time)
 237:../Generated_Code/PwmLdd1.c **** {
 218              		.loc 1 237 0
 219              		.cfi_startproc
 220 0000 80B5     		push	{r7, lr}
 221              	.LCFI9:
 222              		.cfi_def_cfa_offset 8
 223              		.cfi_offset 7, -8
 224              		.cfi_offset 14, -4
 225 0002 84B0     		sub	sp, sp, #16
 226              	.LCFI10:
 227              		.cfi_def_cfa_offset 24
 228 0004 00AF     		add	r7, sp, #0
 229              	.LCFI11:
 230              		.cfi_def_cfa_register 7
 231 0006 7860     		str	r0, [r7, #4]
 232 0008 0A1C     		mov	r2, r1
 233 000a BB1C     		add	r3, r7, #2
 234 000c 1A80     		strh	r2, [r3]
 235              	.LBB5:
 238:../Generated_Code/PwmLdd1.c ****   PwmLdd1_TDeviceData *DeviceDataPrv = (PwmLdd1_TDeviceData *)DeviceDataPtr;
 236              		.loc 1 238 0
 237 000e 7B68     		ldr	r3, [r7, #4]
 238 0010 FB60     		str	r3, [r7, #12]
 239:../Generated_Code/PwmLdd1.c ****   LDD_TimerUnit_Tfloat rtval;          /* Result of multiplication */
 240:../Generated_Code/PwmLdd1.c **** 
 241:../Generated_Code/PwmLdd1.c ****   /* Time test - this test can be disabled by setting the "Ignore range checking"
 242:../Generated_Code/PwmLdd1.c ****      property to the "yes" value in the "Configuration inspector" */
 243:../Generated_Code/PwmLdd1.c ****   if (Time > 0x186AU) {                /* Is the given value out of range? */
 239              		.loc 1 243 0
 240 0012 BB1C     		add	r3, r7, #2
 241 0014 1A88     		ldrh	r2, [r3]
 242 0016 164B     		ldr	r3, .L18
 243 0018 9A42     		cmp	r2, r3
 244 001a 01D9     		bls	.L11
 244:../Generated_Code/PwmLdd1.c ****     return ERR_PARAM_RANGE;            /* If yes then error */
 245              		.loc 1 244 0
 246 001c 8623     		mov	r3, #134
 247 001e 23E0     		b	.L12
 248              	.L11:
 245:../Generated_Code/PwmLdd1.c ****   }
 246:../Generated_Code/PwmLdd1.c ****   rtval = Time * 10.48576F;            /* Multiply given value and actual clock configuration coeff
 249              		.loc 1 246 0
 250 0020 BB1C     		add	r3, r7, #2
 251 0022 1B88     		ldrh	r3, [r3]
 252 0024 181C     		mov	r0, r3
 253 0026 FFF7FEFF 		bl	__aeabi_i2f
 254 002a 031C     		add	r3, r0, #0
 255 002c 181C     		add	r0, r3, #0
 256 002e 1149     		ldr	r1, .L18+4
 257 0030 FFF7FEFF 		bl	__aeabi_fmul
 258 0034 031C     		add	r3, r0, #0
 259 0036 BB60     		str	r3, [r7, #8]
 247:../Generated_Code/PwmLdd1.c ****   if (rtval > 0xFFFFUL) {              /* Is the result greater than 65535 ? */
 260              		.loc 1 247 0
 261 0038 B868     		ldr	r0, [r7, #8]
 262 003a 0F49     		ldr	r1, .L18+8
 263 003c FFF7FEFF 		bl	__aeabi_fcmpgt
 264 0040 031C     		mov	r3, r0
 265 0042 002B     		cmp	r3, #0
 266 0044 04D0     		beq	.L17
 267              	.L16:
 248:../Generated_Code/PwmLdd1.c ****     DeviceDataPrv->RatioStore = 0xFFFFU; /* If yes then use maximal possible value */
 268              		.loc 1 248 0
 269 0046 FB68     		ldr	r3, [r7, #12]
 270 0048 0122     		mov	r2, #1
 271 004a 5242     		neg	r2, r2
 272 004c DA80     		strh	r2, [r3, #6]
 273 004e 06E0     		b	.L15
 274              	.L17:
 249:../Generated_Code/PwmLdd1.c ****   }
 250:../Generated_Code/PwmLdd1.c ****   else {
 251:../Generated_Code/PwmLdd1.c ****     DeviceDataPrv->RatioStore = (uint16_t)rtval;
 275              		.loc 1 251 0
 276 0050 B868     		ldr	r0, [r7, #8]
 277 0052 FFF7FEFF 		bl	__aeabi_f2uiz
 278 0056 031C     		mov	r3, r0
 279 0058 9AB2     		uxth	r2, r3
 280 005a FB68     		ldr	r3, [r7, #12]
 281 005c DA80     		strh	r2, [r3, #6]
 282              	.L15:
 252:../Generated_Code/PwmLdd1.c ****   }
 253:../Generated_Code/PwmLdd1.c ****   SetRatio(DeviceDataPtr);             /* Calculate and set up new appropriate values of the duty r
 283              		.loc 1 253 0
 284 005e 7B68     		ldr	r3, [r7, #4]
 285 0060 181C     		mov	r0, r3
 286 0062 FFF7FEFF 		bl	SetRatio
 254:../Generated_Code/PwmLdd1.c ****   return ERR_OK;                       /* OK */
 287              		.loc 1 254 0
 288 0066 0023     		mov	r3, #0
 289              	.L12:
 290              	.LBE5:
 255:../Generated_Code/PwmLdd1.c **** }
 291              		.loc 1 255 0
 292 0068 181C     		mov	r0, r3
 293 006a BD46     		mov	sp, r7
 294 006c 04B0     		add	sp, sp, #16
 295              		@ sp needed for prologue
 296 006e 80BD     		pop	{r7, pc}
 297              	.L19:
 298              		.align	2
 299              	.L18:
 300 0070 6A180000 		.word	6250
 301 0074 ACC52741 		.word	1093125548
 302 0078 00FF7F47 		.word	1199570688
 303              		.cfi_endproc
 304              	.LFE3:
 306              		.section	.text.PwmLdd1_SetDutyMS,"ax",%progbits
 307              		.align	2
 308              		.global	PwmLdd1_SetDutyMS
 309              		.code	16
 310              		.thumb_func
 312              	PwmLdd1_SetDutyMS:
 313              	.LFB4:
 256:../Generated_Code/PwmLdd1.c **** 
 257:../Generated_Code/PwmLdd1.c **** /*
 258:../Generated_Code/PwmLdd1.c **** ** ===================================================================
 259:../Generated_Code/PwmLdd1.c **** **     Method      :  PwmLdd1_SetDutyMS (component PWM_LDD)
 260:../Generated_Code/PwmLdd1.c **** */
 261:../Generated_Code/PwmLdd1.c **** /*!
 262:../Generated_Code/PwmLdd1.c **** **     @brief
 263:../Generated_Code/PwmLdd1.c **** **         This method sets the new duty value of the output signal.
 264:../Generated_Code/PwmLdd1.c **** **         The duty is expressed in milliseconds as a 16-bit unsigned
 265:../Generated_Code/PwmLdd1.c **** **         integer number. The method is available only if it is not
 266:../Generated_Code/PwmLdd1.c **** **         selected list of predefined values in [Starting pulse width]
 267:../Generated_Code/PwmLdd1.c **** **         property.
 268:../Generated_Code/PwmLdd1.c **** **     @param
 269:../Generated_Code/PwmLdd1.c **** **         DeviceDataPtr   - Device data structure
 270:../Generated_Code/PwmLdd1.c **** **                           pointer returned by [Init] method.
 271:../Generated_Code/PwmLdd1.c **** **     @param
 272:../Generated_Code/PwmLdd1.c **** **         Time            - Duty to set [in milliseconds]
 273:../Generated_Code/PwmLdd1.c **** **     @return
 274:../Generated_Code/PwmLdd1.c **** **                         - Error code, possible codes:
 275:../Generated_Code/PwmLdd1.c **** **                           ERR_OK - OK
 276:../Generated_Code/PwmLdd1.c **** **                           ERR_SPEED - The component does not work in
 277:../Generated_Code/PwmLdd1.c **** **                           the active clock configuration
 278:../Generated_Code/PwmLdd1.c **** **                           ERR_MATH - Overflow during evaluation
 279:../Generated_Code/PwmLdd1.c **** **                           ERR_PARAM_RANGE - Parameter out of range
 280:../Generated_Code/PwmLdd1.c **** */
 281:../Generated_Code/PwmLdd1.c **** /* ===================================================================*/
 282:../Generated_Code/PwmLdd1.c **** LDD_TError PwmLdd1_SetDutyMS(LDD_TDeviceData *DeviceDataPtr, uint16_t Time)
 283:../Generated_Code/PwmLdd1.c **** {
 314              		.loc 1 283 0
 315              		.cfi_startproc
 316 0000 80B5     		push	{r7, lr}
 317              	.LCFI12:
 318              		.cfi_def_cfa_offset 8
 319              		.cfi_offset 7, -8
 320              		.cfi_offset 14, -4
 321 0002 84B0     		sub	sp, sp, #16
 322              	.LCFI13:
 323              		.cfi_def_cfa_offset 24
 324 0004 00AF     		add	r7, sp, #0
 325              	.LCFI14:
 326              		.cfi_def_cfa_register 7
 327 0006 7860     		str	r0, [r7, #4]
 328 0008 0A1C     		mov	r2, r1
 329 000a BB1C     		add	r3, r7, #2
 330 000c 1A80     		strh	r2, [r3]
 331              	.LBB6:
 284:../Generated_Code/PwmLdd1.c ****   PwmLdd1_TDeviceData *DeviceDataPrv = (PwmLdd1_TDeviceData *)DeviceDataPtr;
 332              		.loc 1 284 0
 333 000e 7B68     		ldr	r3, [r7, #4]
 334 0010 FB60     		str	r3, [r7, #12]
 285:../Generated_Code/PwmLdd1.c ****   LDD_TimerUnit_Tfloat rtval;          /* Result of multiplication */
 286:../Generated_Code/PwmLdd1.c **** 
 287:../Generated_Code/PwmLdd1.c ****   /* Time test - this test can be disabled by setting the "Ignore range checking"
 288:../Generated_Code/PwmLdd1.c ****      property to the "yes" value in the "Configuration inspector" */
 289:../Generated_Code/PwmLdd1.c ****   if (Time > 0x06U) {                  /* Is the given value out of range? */
 335              		.loc 1 289 0
 336 0012 BB1C     		add	r3, r7, #2
 337 0014 1B88     		ldrh	r3, [r3]
 338 0016 062B     		cmp	r3, #6
 339 0018 01D9     		bls	.L21
 290:../Generated_Code/PwmLdd1.c ****     return ERR_PARAM_RANGE;            /* If yes then error */
 340              		.loc 1 290 0
 341 001a 8623     		mov	r3, #134
 342 001c 23E0     		b	.L22
 343              	.L21:
 291:../Generated_Code/PwmLdd1.c ****   }
 292:../Generated_Code/PwmLdd1.c ****   rtval = Time * 10485.76F;            /* Multiply given value and actual clock configuration coeff
 344              		.loc 1 292 0
 345 001e BB1C     		add	r3, r7, #2
 346 0020 1B88     		ldrh	r3, [r3]
 347 0022 181C     		mov	r0, r3
 348 0024 FFF7FEFF 		bl	__aeabi_i2f
 349 0028 031C     		add	r3, r0, #0
 350 002a 181C     		add	r0, r3, #0
 351 002c 1049     		ldr	r1, .L28
 352 002e FFF7FEFF 		bl	__aeabi_fmul
 353 0032 031C     		add	r3, r0, #0
 354 0034 BB60     		str	r3, [r7, #8]
 293:../Generated_Code/PwmLdd1.c ****   if (rtval > 0xFFFFUL) {              /* Is the result greater than 65535 ? */
 355              		.loc 1 293 0
 356 0036 B868     		ldr	r0, [r7, #8]
 357 0038 0E49     		ldr	r1, .L28+4
 358 003a FFF7FEFF 		bl	__aeabi_fcmpgt
 359 003e 031C     		mov	r3, r0
 360 0040 002B     		cmp	r3, #0
 361 0042 04D0     		beq	.L27
 362              	.L26:
 294:../Generated_Code/PwmLdd1.c ****     DeviceDataPrv->RatioStore = 0xFFFFU; /* If yes then use maximal possible value */
 363              		.loc 1 294 0
 364 0044 FB68     		ldr	r3, [r7, #12]
 365 0046 0122     		mov	r2, #1
 366 0048 5242     		neg	r2, r2
 367 004a DA80     		strh	r2, [r3, #6]
 368 004c 06E0     		b	.L25
 369              	.L27:
 295:../Generated_Code/PwmLdd1.c ****   }
 296:../Generated_Code/PwmLdd1.c ****   else {
 297:../Generated_Code/PwmLdd1.c ****     DeviceDataPrv->RatioStore = (uint16_t)rtval;
 370              		.loc 1 297 0
 371 004e B868     		ldr	r0, [r7, #8]
 372 0050 FFF7FEFF 		bl	__aeabi_f2uiz
 373 0054 031C     		mov	r3, r0
 374 0056 9AB2     		uxth	r2, r3
 375 0058 FB68     		ldr	r3, [r7, #12]
 376 005a DA80     		strh	r2, [r3, #6]
 377              	.L25:
 298:../Generated_Code/PwmLdd1.c ****   }
 299:../Generated_Code/PwmLdd1.c ****   SetRatio(DeviceDataPtr);             /* Calculate and set up new appropriate values of the duty r
 378              		.loc 1 299 0
 379 005c 7B68     		ldr	r3, [r7, #4]
 380 005e 181C     		mov	r0, r3
 381 0060 FFF7FEFF 		bl	SetRatio
 300:../Generated_Code/PwmLdd1.c ****   return ERR_OK;                       /* OK */
 382              		.loc 1 300 0
 383 0064 0023     		mov	r3, #0
 384              	.L22:
 385              	.LBE6:
 301:../Generated_Code/PwmLdd1.c **** }
 386              		.loc 1 301 0
 387 0066 181C     		mov	r0, r3
 388 0068 BD46     		mov	sp, r7
 389 006a 04B0     		add	sp, sp, #16
 390              		@ sp needed for prologue
 391 006c 80BD     		pop	{r7, pc}
 392              	.L29:
 393 006e C046     		.align	2
 394              	.L28:
 395 0070 0AD72346 		.word	1176753930
 396 0074 00FF7F47 		.word	1199570688
 397              		.cfi_endproc
 398              	.LFE4:
 400              		.section	.text.SetRatio,"ax",%progbits
 401              		.align	2
 402              		.code	16
 403              		.thumb_func
 405              	SetRatio:
 406              	.LFB5:
 302:../Generated_Code/PwmLdd1.c **** 
 303:../Generated_Code/PwmLdd1.c **** /*
 304:../Generated_Code/PwmLdd1.c **** ** ===================================================================
 305:../Generated_Code/PwmLdd1.c **** **     Method      :  SetRatio (component PWM_LDD)
 306:../Generated_Code/PwmLdd1.c **** **
 307:../Generated_Code/PwmLdd1.c **** **     Description :
 308:../Generated_Code/PwmLdd1.c **** **         This method calculates new value of duty compare register from 
 309:../Generated_Code/PwmLdd1.c **** **         variable RatioStore.
 310:../Generated_Code/PwmLdd1.c **** **         This method is internal. It is used by Processor Expert only.
 311:../Generated_Code/PwmLdd1.c **** ** ===================================================================
 312:../Generated_Code/PwmLdd1.c **** */
 313:../Generated_Code/PwmLdd1.c **** static void SetRatio(LDD_TDeviceData *DeviceDataPtr)
 314:../Generated_Code/PwmLdd1.c **** {
 407              		.loc 1 314 0
 408              		.cfi_startproc
 409 0000 80B5     		push	{r7, lr}
 410              	.LCFI15:
 411              		.cfi_def_cfa_offset 8
 412              		.cfi_offset 7, -8
 413              		.cfi_offset 14, -4
 414 0002 86B0     		sub	sp, sp, #24
 415              	.LCFI16:
 416              		.cfi_def_cfa_offset 32
 417 0004 00AF     		add	r7, sp, #0
 418              	.LCFI17:
 419              		.cfi_def_cfa_register 7
 420 0006 7860     		str	r0, [r7, #4]
 421              	.LBB7:
 315:../Generated_Code/PwmLdd1.c ****   PwmLdd1_TDeviceData *DeviceDataPrv = (PwmLdd1_TDeviceData*)DeviceDataPtr;
 422              		.loc 1 315 0
 423 0008 7B68     		ldr	r3, [r7, #4]
 424 000a 3B61     		str	r3, [r7, #16]
 316:../Generated_Code/PwmLdd1.c ****   uint16_t Period;
 317:../Generated_Code/PwmLdd1.c ****   uint16_t Duty;
 318:../Generated_Code/PwmLdd1.c **** 
 319:../Generated_Code/PwmLdd1.c ****   (void)TU0_GetPeriodTicks(DeviceDataPrv->LinkedDeviceDataPtr, &Period);
 425              		.loc 1 319 0
 426 000c 3B69     		ldr	r3, [r7, #16]
 427 000e 1A68     		ldr	r2, [r3]
 428 0010 3B1C     		mov	r3, r7
 429 0012 0E33     		add	r3, r3, #14
 430 0014 101C     		mov	r0, r2
 431 0016 191C     		mov	r1, r3
 432 0018 FFF7FEFF 		bl	TU0_GetPeriodTicks
 320:../Generated_Code/PwmLdd1.c ****   if (Period == 0U) {
 433              		.loc 1 320 0
 434 001c 3B1C     		mov	r3, r7
 435 001e 0E33     		add	r3, r3, #14
 436 0020 1B88     		ldrh	r3, [r3]
 437 0022 002B     		cmp	r3, #0
 438 0024 05D1     		bne	.L31
 321:../Generated_Code/PwmLdd1.c ****     Duty = DeviceDataPrv->RatioStore;
 439              		.loc 1 321 0
 440 0026 3B1C     		mov	r3, r7
 441 0028 1633     		add	r3, r3, #22
 442 002a 3A69     		ldr	r2, [r7, #16]
 443 002c D288     		ldrh	r2, [r2, #6]
 444 002e 1A80     		strh	r2, [r3]
 445 0030 0CE0     		b	.L32
 446              	.L31:
 322:../Generated_Code/PwmLdd1.c ****   }
 323:../Generated_Code/PwmLdd1.c ****   else {
 324:../Generated_Code/PwmLdd1.c ****     Duty = (uint16_t)((((uint32_t)(Period) * DeviceDataPrv->RatioStore) + 0x8000) >> 0x10);
 447              		.loc 1 324 0
 448 0032 3B1C     		mov	r3, r7
 449 0034 0E33     		add	r3, r3, #14
 450 0036 1B88     		ldrh	r3, [r3]
 451 0038 3A69     		ldr	r2, [r7, #16]
 452 003a D288     		ldrh	r2, [r2, #6]
 453 003c 5343     		mul	r3, r2
 454 003e 8022     		mov	r2, #128
 455 0040 1202     		lsl	r2, r2, #8
 456 0042 9B18     		add	r3, r3, r2
 457 0044 1A0C     		lsr	r2, r3, #16
 458 0046 3B1C     		mov	r3, r7
 459 0048 1633     		add	r3, r3, #22
 460 004a 1A80     		strh	r2, [r3]
 461              	.L32:
 325:../Generated_Code/PwmLdd1.c ****   }
 326:../Generated_Code/PwmLdd1.c ****   (void)TU0_SetOffsetTicks(DeviceDataPrv->LinkedDeviceDataPtr, CHANNEL, Duty);
 462              		.loc 1 326 0
 463 004c 3B69     		ldr	r3, [r7, #16]
 464 004e 1A68     		ldr	r2, [r3]
 465 0050 3B1C     		mov	r3, r7
 466 0052 1633     		add	r3, r3, #22
 467 0054 1B88     		ldrh	r3, [r3]
 468 0056 101C     		mov	r0, r2
 469 0058 0021     		mov	r1, #0
 470 005a 1A1C     		mov	r2, r3
 471 005c FFF7FEFF 		bl	TU0_SetOffsetTicks
 472              	.LBE7:
 327:../Generated_Code/PwmLdd1.c **** }
 473              		.loc 1 327 0
 474 0060 BD46     		mov	sp, r7
 475 0062 06B0     		add	sp, sp, #24
 476              		@ sp needed for prologue
 477 0064 80BD     		pop	{r7, pc}
 478              		.cfi_endproc
 479              	.LFE5:
 481 0066 C046     		.text
 482              	.Letext0:
 483              		.file 2 "C:/Freescale/CW MCU v10.6/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 484              		.file 3 "../Generated_Code/PE_Types.h"
DEFINED SYMBOLS
                            *ABS*:00000000 PwmLdd1.c
C:\Users\Judah\AppData\Local\Temp\cc0cH2Cb.s:18     .bss._ZL33DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 $d
C:\Users\Judah\AppData\Local\Temp\cc0cH2Cb.s:21     .bss._ZL33DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 _ZL33DeviceDataPrv__DEFAULT_RTOS_ALLOC
C:\Users\Judah\AppData\Local\Temp\cc0cH2Cb.s:24     .text.PwmLdd1_Init:00000000 $t
C:\Users\Judah\AppData\Local\Temp\cc0cH2Cb.s:29     .text.PwmLdd1_Init:00000000 PwmLdd1_Init
C:\Users\Judah\AppData\Local\Temp\cc0cH2Cb.s:98     .text.PwmLdd1_Init:0000004c $d
C:\Users\Judah\AppData\Local\Temp\cc0cH2Cb.s:104    .text.PwmLdd1_SetRatio8:00000000 $t
C:\Users\Judah\AppData\Local\Temp\cc0cH2Cb.s:109    .text.PwmLdd1_SetRatio8:00000000 PwmLdd1_SetRatio8
C:\Users\Judah\AppData\Local\Temp\cc0cH2Cb.s:405    .text.SetRatio:00000000 SetRatio
C:\Users\Judah\AppData\Local\Temp\cc0cH2Cb.s:157    .text.PwmLdd1_SetRatio16:00000000 $t
C:\Users\Judah\AppData\Local\Temp\cc0cH2Cb.s:162    .text.PwmLdd1_SetRatio16:00000000 PwmLdd1_SetRatio16
C:\Users\Judah\AppData\Local\Temp\cc0cH2Cb.s:211    .text.PwmLdd1_SetDutyUS:00000000 $t
C:\Users\Judah\AppData\Local\Temp\cc0cH2Cb.s:216    .text.PwmLdd1_SetDutyUS:00000000 PwmLdd1_SetDutyUS
C:\Users\Judah\AppData\Local\Temp\cc0cH2Cb.s:300    .text.PwmLdd1_SetDutyUS:00000070 $d
C:\Users\Judah\AppData\Local\Temp\cc0cH2Cb.s:307    .text.PwmLdd1_SetDutyMS:00000000 $t
C:\Users\Judah\AppData\Local\Temp\cc0cH2Cb.s:312    .text.PwmLdd1_SetDutyMS:00000000 PwmLdd1_SetDutyMS
C:\Users\Judah\AppData\Local\Temp\cc0cH2Cb.s:395    .text.PwmLdd1_SetDutyMS:00000070 $d
C:\Users\Judah\AppData\Local\Temp\cc0cH2Cb.s:401    .text.SetRatio:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
TU0_Init
PE_LDD_DeviceDataList
__aeabi_i2f
__aeabi_fmul
__aeabi_fcmpgt
__aeabi_f2uiz
TU0_GetPeriodTicks
TU0_SetOffsetTicks
