   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"Cpu.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	SR_reg
  18              		.section	.bss.SR_reg,"aw",%nobits
  21              	SR_reg:
  22 0000 00       		.space	1
  23              		.global	SR_lock
  24              		.section	.bss.SR_lock,"aw",%nobits
  27              	SR_lock:
  28 0000 00       		.space	1
  29              		.section	.text.Cpu_INT_NMIInterrupt,"ax",%progbits
  30              		.align	2
  31              		.global	Cpu_INT_NMIInterrupt
  32              		.code	16
  33              		.thumb_func
  35              	Cpu_INT_NMIInterrupt:
  36              	.LFB5:
  37              		.file 1 "../Generated_Code/Cpu.c"
   1:../Generated_Code/Cpu.c **** /* ###################################################################
   2:../Generated_Code/Cpu.c **** **     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
   3:../Generated_Code/Cpu.c **** **     Filename    : Cpu.c
   4:../Generated_Code/Cpu.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/Cpu.c **** **     Processor   : MKL25Z128VLK4
   6:../Generated_Code/Cpu.c **** **     Component   : MKL25Z128LK4
   7:../Generated_Code/Cpu.c **** **     Version     : Component 01.025, Driver 01.04, CPU db: 3.00.000
   8:../Generated_Code/Cpu.c **** **     Datasheet   : KL25P80M48SF0RM, Rev.3, Sep 2012
   9:../Generated_Code/Cpu.c **** **     Compiler    : GNU C Compiler
  10:../Generated_Code/Cpu.c **** **     Date/Time   : 2014-04-05, 15:28, # CodeGen: 4
  11:../Generated_Code/Cpu.c **** **     Abstract    :
  12:../Generated_Code/Cpu.c **** **
  13:../Generated_Code/Cpu.c **** **     Settings    :
  14:../Generated_Code/Cpu.c **** **
  15:../Generated_Code/Cpu.c **** **     Contents    :
  16:../Generated_Code/Cpu.c **** **         No public methods
  17:../Generated_Code/Cpu.c **** **
  18:../Generated_Code/Cpu.c **** **     Copyright : 1997 - 2013 Freescale Semiconductor, Inc. All Rights Reserved.
  19:../Generated_Code/Cpu.c **** **     SOURCE DISTRIBUTION PERMISSIBLE as directed in End User License Agreement.
  20:../Generated_Code/Cpu.c **** **     
  21:../Generated_Code/Cpu.c **** **     http      : www.freescale.com
  22:../Generated_Code/Cpu.c **** **     mail      : support@freescale.com
  23:../Generated_Code/Cpu.c **** ** ###################################################################*/
  24:../Generated_Code/Cpu.c **** /*!
  25:../Generated_Code/Cpu.c **** ** @file Cpu.c
  26:../Generated_Code/Cpu.c **** ** @version 01.04
  27:../Generated_Code/Cpu.c **** ** @brief
  28:../Generated_Code/Cpu.c **** **
  29:../Generated_Code/Cpu.c **** */         
  30:../Generated_Code/Cpu.c **** /*!
  31:../Generated_Code/Cpu.c **** **  @addtogroup Cpu_module Cpu module documentation
  32:../Generated_Code/Cpu.c **** **  @{
  33:../Generated_Code/Cpu.c **** */         
  34:../Generated_Code/Cpu.c **** 
  35:../Generated_Code/Cpu.c **** /* MODULE Cpu. */
  36:../Generated_Code/Cpu.c **** 
  37:../Generated_Code/Cpu.c **** #include "FreeRTOS.h" /* FreeRTOS interface */
  38:../Generated_Code/Cpu.c **** #include "FreeRTOS0.h"
  39:../Generated_Code/Cpu.c **** #include "UTIL0.h"
  40:../Generated_Code/Cpu.c **** #include "MMA0.h"
  41:../Generated_Code/Cpu.c **** #include "GI2C0.h"
  42:../Generated_Code/Cpu.c **** #include "WAIT0.h"
  43:../Generated_Code/Cpu.c **** #include "I2C0.h"
  44:../Generated_Code/Cpu.c **** #include "TU0.h"
  45:../Generated_Code/Cpu.c **** #include "PWMLEDBlue.h"
  46:../Generated_Code/Cpu.c **** #include "PwmLdd1.h"
  47:../Generated_Code/Cpu.c **** #include "PWMLEDRed.h"
  48:../Generated_Code/Cpu.c **** #include "PwmLdd2.h"
  49:../Generated_Code/Cpu.c **** #include "TU2.h"
  50:../Generated_Code/Cpu.c **** #include "PWMLEDGreen.h"
  51:../Generated_Code/Cpu.c **** #include "PwmLdd3.h"
  52:../Generated_Code/Cpu.c **** #include "PE_Types.h"
  53:../Generated_Code/Cpu.c **** #include "PE_Error.h"
  54:../Generated_Code/Cpu.c **** #include "PE_Const.h"
  55:../Generated_Code/Cpu.c **** #include "IO_Map.h"
  56:../Generated_Code/Cpu.c **** #include "Events.h"
  57:../Generated_Code/Cpu.c **** #include "Cpu.h"
  58:../Generated_Code/Cpu.c **** 
  59:../Generated_Code/Cpu.c **** #ifdef __cplusplus
  60:../Generated_Code/Cpu.c **** extern "C" {
  61:../Generated_Code/Cpu.c **** #endif 
  62:../Generated_Code/Cpu.c **** 
  63:../Generated_Code/Cpu.c **** /* Global variables */
  64:../Generated_Code/Cpu.c **** volatile uint8_t SR_reg;               /* Current value of the FAULTMASK register */
  65:../Generated_Code/Cpu.c **** volatile uint8_t SR_lock = 0x00U;      /* Lock */
  66:../Generated_Code/Cpu.c **** 
  67:../Generated_Code/Cpu.c **** 
  68:../Generated_Code/Cpu.c **** /*
  69:../Generated_Code/Cpu.c **** ** ===================================================================
  70:../Generated_Code/Cpu.c **** **     Method      :  Cpu_INT_NMIInterrupt (component MKL25Z128LK4)
  71:../Generated_Code/Cpu.c **** **
  72:../Generated_Code/Cpu.c **** **     Description :
  73:../Generated_Code/Cpu.c **** **         This ISR services the Non Maskable Interrupt interrupt.
  74:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
  75:../Generated_Code/Cpu.c **** ** ===================================================================
  76:../Generated_Code/Cpu.c **** */
  77:../Generated_Code/Cpu.c **** PE_ISR(Cpu_INT_NMIInterrupt)
  78:../Generated_Code/Cpu.c **** {
  38              		.loc 1 78 0
  39              		.cfi_startproc
  40 0000 80B5     		push	{r7, lr}
  41              	.LCFI0:
  42              		.cfi_def_cfa_offset 8
  43              		.cfi_offset 7, -8
  44              		.cfi_offset 14, -4
  45 0002 00AF     		add	r7, sp, #0
  46              	.LCFI1:
  47              		.cfi_def_cfa_register 7
  79:../Generated_Code/Cpu.c ****   Cpu_OnNMIINT0();
  48              		.loc 1 79 0
  49 0004 FFF7FEFF 		bl	_Z13Cpu_OnNMIINT0v
  80:../Generated_Code/Cpu.c **** }
  50              		.loc 1 80 0
  51 0008 BD46     		mov	sp, r7
  52              		@ sp needed for prologue
  53 000a 80BD     		pop	{r7, pc}
  54              		.cfi_endproc
  55              	.LFE5:
  57              		.section	.text.Cpu_Interrupt,"ax",%progbits
  58              		.align	2
  59              		.global	Cpu_Interrupt
  60              		.code	16
  61              		.thumb_func
  63              	Cpu_Interrupt:
  64              	.LFB6:
  81:../Generated_Code/Cpu.c **** 
  82:../Generated_Code/Cpu.c **** /*
  83:../Generated_Code/Cpu.c **** ** ===================================================================
  84:../Generated_Code/Cpu.c **** **     Method      :  Cpu_Cpu_Interrupt (component MKL25Z128LK4)
  85:../Generated_Code/Cpu.c **** **
  86:../Generated_Code/Cpu.c **** **     Description :
  87:../Generated_Code/Cpu.c **** **         This ISR services an unused interrupt/exception vector.
  88:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
  89:../Generated_Code/Cpu.c **** ** ===================================================================
  90:../Generated_Code/Cpu.c **** */
  91:../Generated_Code/Cpu.c **** PE_ISR(Cpu_Interrupt)
  92:../Generated_Code/Cpu.c **** {
  65              		.loc 1 92 0
  66              		.cfi_startproc
  67 0000 80B5     		push	{r7, lr}
  68              	.LCFI2:
  69              		.cfi_def_cfa_offset 8
  70              		.cfi_offset 7, -8
  71              		.cfi_offset 14, -4
  72 0002 00AF     		add	r7, sp, #0
  73              	.LCFI3:
  74              		.cfi_def_cfa_register 7
  93:../Generated_Code/Cpu.c ****   /* This code can be changed using the CPU component property "Build Options / Unhandled int code"
  94:../Generated_Code/Cpu.c ****   PE_DEBUGHALT();
  75              		.loc 1 94 0
  76              	@ 94 "../Generated_Code/Cpu.c" 1
  77 0004 FFBE     		BKPT 255
  78              	@ 0 "" 2
  95:../Generated_Code/Cpu.c **** }
  79              		.loc 1 95 0
  80              		.code	16
  81 0006 BD46     		mov	sp, r7
  82              		@ sp needed for prologue
  83 0008 80BD     		pop	{r7, pc}
  84              		.cfi_endproc
  85              	.LFE6:
  87 000a C046     		.section	.text.__init_hardware,"ax",%progbits
  88              		.align	2
  89              		.global	__init_hardware
  90              		.code	16
  91              		.thumb_func
  93              	__init_hardware:
  94              	.LFB7:
  96:../Generated_Code/Cpu.c **** 
  97:../Generated_Code/Cpu.c **** 
  98:../Generated_Code/Cpu.c **** /*** !!! Here you can place your own code using property "User data declarations" on the build opti
  99:../Generated_Code/Cpu.c **** 
 100:../Generated_Code/Cpu.c **** /*lint -esym(765,__init_hardware) Disable MISRA rule (8.10) checking for symbols (__init_hardware).
 101:../Generated_Code/Cpu.c **** /*lint -esym(765,Cpu_Interrupt) Disable MISRA rule (8.10) checking for symbols (Cpu_Interrupt). */
 102:../Generated_Code/Cpu.c **** void __init_hardware(void)
 103:../Generated_Code/Cpu.c **** {
  95              		.loc 1 103 0
  96              		.cfi_startproc
  97 0000 80B5     		push	{r7, lr}
  98              	.LCFI4:
  99              		.cfi_def_cfa_offset 8
 100              		.cfi_offset 7, -8
 101              		.cfi_offset 14, -4
 102 0002 00AF     		add	r7, sp, #0
 103              	.LCFI5:
 104              		.cfi_def_cfa_register 7
 104:../Generated_Code/Cpu.c **** 
 105:../Generated_Code/Cpu.c ****   /*** !!! Here you can place your own code before PE initialization using property "User code befo
 106:../Generated_Code/Cpu.c **** 
 107:../Generated_Code/Cpu.c ****   /*** ### MKL25Z128VLK4 "Cpu" init code ... ***/
 108:../Generated_Code/Cpu.c ****   /*** PE initialization code after reset ***/
 109:../Generated_Code/Cpu.c ****   SCB_VTOR = (uint32_t)(&__vect_table); /* Set the interrupt vector table position */
 105              		.loc 1 109 0
 106 0004 564A     		ldr	r2, .L10
 107 0006 5749     		ldr	r1, .L10+4
 108 0008 574B     		ldr	r3, .L10+8
 109 000a D150     		str	r1, [r2, r3]
 110:../Generated_Code/Cpu.c ****   /* Disable the WDOG module */
 111:../Generated_Code/Cpu.c ****   /* SIM_COPC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0
 112:../Generated_Code/Cpu.c ****   SIM_COPC = SIM_COPC_COPT(0x00);                                   
 110              		.loc 1 112 0
 111 000c 574A     		ldr	r2, .L10+12
 112 000e 8823     		mov	r3, #136
 113 0010 5B01     		lsl	r3, r3, #5
 114 0012 0021     		mov	r1, #0
 115 0014 D150     		str	r1, [r2, r3]
 113:../Generated_Code/Cpu.c **** 
 114:../Generated_Code/Cpu.c ****   /* System clock initialization */
 115:../Generated_Code/Cpu.c ****   /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=3,??=0,??=0,??=0,?
 116:../Generated_Code/Cpu.c ****   SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x03)); /* Set the system prescale
 116              		.loc 1 116 0
 117 0016 554A     		ldr	r2, .L10+12
 118 0018 554B     		ldr	r3, .L10+16
 119 001a C021     		mov	r1, #192
 120 001c 8902     		lsl	r1, r1, #10
 121 001e D150     		str	r1, [r2, r3]
 117:../Generated_Code/Cpu.c ****   /* SIM_SCGC5: PORTE=1,PORTD=1,PORTB=1,PORTA=1 */
 118:../Generated_Code/Cpu.c ****   SIM_SCGC5 |= SIM_SCGC5_PORTE_MASK |
 119:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTD_MASK |
 120:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTB_MASK |
 121:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTA_MASK;   /* Enable clock gate for ports to enable pin routing */
 122              		.loc 1 121 0
 123 0020 524A     		ldr	r2, .L10+12
 124 0022 5249     		ldr	r1, .L10+12
 125 0024 534B     		ldr	r3, .L10+20
 126 0026 CB58     		ldr	r3, [r1, r3]
 127 0028 D821     		mov	r1, #216
 128 002a 8901     		lsl	r1, r1, #6
 129 002c 1943     		orr	r1, r3
 130 002e 514B     		ldr	r3, .L10+20
 131 0030 D150     		str	r1, [r2, r3]
 122:../Generated_Code/Cpu.c ****   if ((PMC_REGSC & PMC_REGSC_ACKISO_MASK) != 0x0U) {
 132              		.loc 1 122 0
 133 0032 514B     		ldr	r3, .L10+24
 134 0034 9B78     		ldrb	r3, [r3, #2]
 135 0036 DBB2     		uxtb	r3, r3
 136 0038 1A1C     		mov	r2, r3
 137 003a 0823     		mov	r3, #8
 138 003c 1340     		and	r3, r2
 139 003e 5A1E     		sub	r2, r3, #1
 140 0040 9341     		sbc	r3, r3, r2
 141 0042 DBB2     		uxtb	r3, r3
 142 0044 002B     		cmp	r3, #0
 143 0046 07D0     		beq	.L4
 123:../Generated_Code/Cpu.c ****     /* PMC_REGSC: ACKISO=1 */
 124:../Generated_Code/Cpu.c ****     PMC_REGSC |= PMC_REGSC_ACKISO_MASK; /* Release IO pads after wakeup from VLLS mode. */
 144              		.loc 1 124 0
 145 0048 4B4B     		ldr	r3, .L10+24
 146 004a 4B4A     		ldr	r2, .L10+24
 147 004c 9278     		ldrb	r2, [r2, #2]
 148 004e D2B2     		uxtb	r2, r2
 149 0050 0821     		mov	r1, #8
 150 0052 0A43     		orr	r2, r1
 151 0054 D2B2     		uxtb	r2, r2
 152 0056 9A70     		strb	r2, [r3, #2]
 153              	.L4:
 125:../Generated_Code/Cpu.c ****   }
 126:../Generated_Code/Cpu.c ****   /* SIM_CLKDIV1: OUTDIV1=1,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=1,??=0,??=0,??=0,?
 127:../Generated_Code/Cpu.c ****   SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x01) | SIM_CLKDIV1_OUTDIV4(0x01)); /* Update system prescaler
 154              		.loc 1 127 0
 155 0058 444A     		ldr	r2, .L10+12
 156 005a 454B     		ldr	r3, .L10+16
 157 005c 4749     		ldr	r1, .L10+28
 158 005e D150     		str	r1, [r2, r3]
 128:../Generated_Code/Cpu.c ****   /* SIM_SOPT2: PLLFLLSEL=1 */
 129:../Generated_Code/Cpu.c ****   SIM_SOPT2 |= SIM_SOPT2_PLLFLLSEL_MASK; /* Select PLL as a clock source for various peripherals */
 159              		.loc 1 129 0
 160 0060 424A     		ldr	r2, .L10+12
 161 0062 4249     		ldr	r1, .L10+12
 162 0064 464B     		ldr	r3, .L10+32
 163 0066 CB58     		ldr	r3, [r1, r3]
 164 0068 8021     		mov	r1, #128
 165 006a 4902     		lsl	r1, r1, #9
 166 006c 1943     		orr	r1, r3
 167 006e 444B     		ldr	r3, .L10+32
 168 0070 D150     		str	r1, [r2, r3]
 130:../Generated_Code/Cpu.c ****   /* SIM_SOPT1: OSC32KSEL=3 */
 131:../Generated_Code/Cpu.c ****   SIM_SOPT1 |= SIM_SOPT1_OSC32KSEL(0x03); /* LPO 1kHz oscillator drives 32 kHz clock for various pe
 169              		.loc 1 131 0
 170 0072 3E4B     		ldr	r3, .L10+12
 171 0074 3D4A     		ldr	r2, .L10+12
 172 0076 1268     		ldr	r2, [r2]
 173 0078 C021     		mov	r1, #192
 174 007a 0903     		lsl	r1, r1, #12
 175 007c 0A43     		orr	r2, r1
 176 007e 1A60     		str	r2, [r3]
 132:../Generated_Code/Cpu.c ****   /* SIM_SOPT2: TPMSRC=1 */
 133:../Generated_Code/Cpu.c ****   SIM_SOPT2 = (uint32_t)((SIM_SOPT2 & (uint32_t)~(uint32_t)(
 134:../Generated_Code/Cpu.c ****                SIM_SOPT2_TPMSRC(0x02)
 135:../Generated_Code/Cpu.c ****               )) | (uint32_t)(
 136:../Generated_Code/Cpu.c ****                SIM_SOPT2_TPMSRC(0x01)
 137:../Generated_Code/Cpu.c ****               ));                      /* Set the TPM clock */
 177              		.loc 1 137 0
 178 0080 3A4A     		ldr	r2, .L10+12
 179 0082 3A49     		ldr	r1, .L10+12
 180 0084 3E4B     		ldr	r3, .L10+32
 181 0086 C958     		ldr	r1, [r1, r3]
 182 0088 3E4B     		ldr	r3, .L10+36
 183 008a 0B40     		and	r3, r1
 184 008c 8021     		mov	r1, #128
 185 008e 4904     		lsl	r1, r1, #17
 186 0090 1943     		orr	r1, r3
 187 0092 3B4B     		ldr	r3, .L10+32
 188 0094 D150     		str	r1, [r2, r3]
 138:../Generated_Code/Cpu.c ****   /* PORTA_PCR18: ISF=0,MUX=0 */
 139:../Generated_Code/Cpu.c ****   PORTA_PCR18 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));                  
 189              		.loc 1 139 0
 190 0096 3C4B     		ldr	r3, .L10+40
 191 0098 3B4A     		ldr	r2, .L10+40
 192 009a 916C     		ldr	r1, [r2, #72]
 193 009c 3B4A     		ldr	r2, .L10+44
 194 009e 0A40     		and	r2, r1
 195 00a0 9A64     		str	r2, [r3, #72]
 140:../Generated_Code/Cpu.c ****   /* PORTA_PCR19: ISF=0,MUX=0 */
 141:../Generated_Code/Cpu.c ****   PORTA_PCR19 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));                  
 196              		.loc 1 141 0
 197 00a2 394B     		ldr	r3, .L10+40
 198 00a4 384A     		ldr	r2, .L10+40
 199 00a6 D16C     		ldr	r1, [r2, #76]
 200 00a8 384A     		ldr	r2, .L10+44
 201 00aa 0A40     		and	r2, r1
 202 00ac DA64     		str	r2, [r3, #76]
 142:../Generated_Code/Cpu.c ****   /* Switch to FBE Mode */
 143:../Generated_Code/Cpu.c ****   /* MCG_C2: LOCRE0=0,??=0,RANGE0=2,HGO0=0,EREFS0=1,LP=0,IRCS=0 */
 144:../Generated_Code/Cpu.c ****   MCG_C2 = (MCG_C2_RANGE0(0x02) | MCG_C2_EREFS0_MASK);                                   
 203              		.loc 1 144 0
 204 00ae 384B     		ldr	r3, .L10+48
 205 00b0 2422     		mov	r2, #36
 206 00b2 5A70     		strb	r2, [r3, #1]
 145:../Generated_Code/Cpu.c ****   /* OSC0_CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=1,SC4P=0,SC8P=0,SC16P=1 */
 146:../Generated_Code/Cpu.c ****   OSC0_CR = (OSC_CR_ERCLKEN_MASK | OSC_CR_SC2P_MASK | OSC_CR_SC16P_MASK);                          
 207              		.loc 1 146 0
 208 00b4 374B     		ldr	r3, .L10+52
 209 00b6 8922     		mov	r2, #137
 210 00b8 1A70     		strb	r2, [r3]
 147:../Generated_Code/Cpu.c ****   /* MCG_C1: CLKS=2,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
 148:../Generated_Code/Cpu.c ****   MCG_C1 = (MCG_C1_CLKS(0x02) | MCG_C1_FRDIV(0x03) | MCG_C1_IRCLKEN_MASK);                         
 211              		.loc 1 148 0
 212 00ba 354B     		ldr	r3, .L10+48
 213 00bc 9A22     		mov	r2, #154
 214 00be 1A70     		strb	r2, [r3]
 149:../Generated_Code/Cpu.c ****   /* MCG_C4: DMX32=0,DRST_DRS=0 */
 150:../Generated_Code/Cpu.c ****   MCG_C4 &= (uint8_t)~(uint8_t)((MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS(0x03)));                      
 215              		.loc 1 150 0
 216 00c0 334B     		ldr	r3, .L10+48
 217 00c2 334A     		ldr	r2, .L10+48
 218 00c4 D278     		ldrb	r2, [r2, #3]
 219 00c6 D1B2     		uxtb	r1, r2
 220 00c8 1F22     		mov	r2, #31
 221 00ca 0A40     		and	r2, r1
 222 00cc D2B2     		uxtb	r2, r2
 223 00ce DA70     		strb	r2, [r3, #3]
 151:../Generated_Code/Cpu.c ****   /* MCG_C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=1 */
 152:../Generated_Code/Cpu.c ****   MCG_C5 = MCG_C5_PRDIV0(0x01);                                   
 224              		.loc 1 152 0
 225 00d0 2F4B     		ldr	r3, .L10+48
 226 00d2 0122     		mov	r2, #1
 227 00d4 1A71     		strb	r2, [r3, #4]
 153:../Generated_Code/Cpu.c ****   /* MCG_C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
 154:../Generated_Code/Cpu.c ****   MCG_C6 = MCG_C6_VDIV0(0x00);                                   
 228              		.loc 1 154 0
 229 00d6 2E4B     		ldr	r3, .L10+48
 230 00d8 0022     		mov	r2, #0
 231 00da 5A71     		strb	r2, [r3, #5]
 232              	.L5:
 155:../Generated_Code/Cpu.c ****   while((MCG_S & MCG_S_IREFST_MASK) != 0x00U) { /* Check that the source of the FLL reference clock
 233              		.loc 1 155 0
 234 00dc 2C4B     		ldr	r3, .L10+48
 235 00de 9B79     		ldrb	r3, [r3, #6]
 236 00e0 DBB2     		uxtb	r3, r3
 237 00e2 1A1C     		mov	r2, r3
 238 00e4 1023     		mov	r3, #16
 239 00e6 1340     		and	r3, r2
 240 00e8 5A1E     		sub	r2, r3, #1
 241 00ea 9341     		sbc	r3, r3, r2
 242 00ec DBB2     		uxtb	r3, r3
 243 00ee 002B     		cmp	r3, #0
 244 00f0 F4D1     		bne	.L5
 245              	.L6:
 156:../Generated_Code/Cpu.c ****   }
 157:../Generated_Code/Cpu.c ****   while((MCG_S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG ou
 246              		.loc 1 157 0
 247 00f2 274B     		ldr	r3, .L10+48
 248 00f4 9B79     		ldrb	r3, [r3, #6]
 249 00f6 DBB2     		uxtb	r3, r3
 250 00f8 1A1C     		mov	r2, r3
 251 00fa 0C23     		mov	r3, #12
 252 00fc 1340     		and	r3, r2
 253 00fe 083B     		sub	r3, r3, #8
 254 0100 5A1E     		sub	r2, r3, #1
 255 0102 9341     		sbc	r3, r3, r2
 256 0104 DBB2     		uxtb	r3, r3
 257 0106 002B     		cmp	r3, #0
 258 0108 F3D1     		bne	.L6
 158:../Generated_Code/Cpu.c ****   }
 159:../Generated_Code/Cpu.c ****   /* Switch to PBE Mode */
 160:../Generated_Code/Cpu.c ****   /* MCG_C6: LOLIE0=0,PLLS=1,CME0=0,VDIV0=0 */
 161:../Generated_Code/Cpu.c ****   MCG_C6 = (MCG_C6_PLLS_MASK | MCG_C6_VDIV0(0x00));                                   
 259              		.loc 1 161 0
 260 010a 214B     		ldr	r3, .L10+48
 261 010c 4022     		mov	r2, #64
 262 010e 5A71     		strb	r2, [r3, #5]
 263              	.L7:
 162:../Generated_Code/Cpu.c ****   while((MCG_S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG ou
 264              		.loc 1 162 0
 265 0110 1F4B     		ldr	r3, .L10+48
 266 0112 9B79     		ldrb	r3, [r3, #6]
 267 0114 DBB2     		uxtb	r3, r3
 268 0116 1A1C     		mov	r2, r3
 269 0118 0C23     		mov	r3, #12
 270 011a 1340     		and	r3, r2
 271 011c 083B     		sub	r3, r3, #8
 272 011e 5A1E     		sub	r2, r3, #1
 273 0120 9341     		sbc	r3, r3, r2
 274 0122 DBB2     		uxtb	r3, r3
 275 0124 002B     		cmp	r3, #0
 276 0126 F3D1     		bne	.L7
 277              	.L8:
 163:../Generated_Code/Cpu.c ****   }
 164:../Generated_Code/Cpu.c ****   while((MCG_S & MCG_S_LOCK0_MASK) == 0x00U) { /* Wait until locked */
 278              		.loc 1 164 0
 279 0128 194B     		ldr	r3, .L10+48
 280 012a 9B79     		ldrb	r3, [r3, #6]
 281 012c DBB2     		uxtb	r3, r3
 282 012e 1A1C     		mov	r2, r3
 283 0130 4023     		mov	r3, #64
 284 0132 1340     		and	r3, r2
 285 0134 5A42     		neg	r2, r3
 286 0136 5341     		adc	r3, r3, r2
 287 0138 DBB2     		uxtb	r3, r3
 288 013a 002B     		cmp	r3, #0
 289 013c F4D1     		bne	.L8
 165:../Generated_Code/Cpu.c ****   }
 166:../Generated_Code/Cpu.c ****   /* Switch to PEE Mode */
 167:../Generated_Code/Cpu.c ****   /* MCG_C1: CLKS=0,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
 168:../Generated_Code/Cpu.c ****   MCG_C1 = (MCG_C1_CLKS(0x00) | MCG_C1_FRDIV(0x03) | MCG_C1_IRCLKEN_MASK);                         
 290              		.loc 1 168 0
 291 013e 144B     		ldr	r3, .L10+48
 292 0140 1A22     		mov	r2, #26
 293 0142 1A70     		strb	r2, [r3]
 294              	.L9:
 169:../Generated_Code/Cpu.c ****   while((MCG_S & 0x0CU) != 0x0CU) {    /* Wait until output of the PLL is selected */
 295              		.loc 1 169 0
 296 0144 124B     		ldr	r3, .L10+48
 297 0146 9B79     		ldrb	r3, [r3, #6]
 298 0148 DBB2     		uxtb	r3, r3
 299 014a 1A1C     		mov	r2, r3
 300 014c 0C23     		mov	r3, #12
 301 014e 1340     		and	r3, r2
 302 0150 0C3B     		sub	r3, r3, #12
 303 0152 5A1E     		sub	r2, r3, #1
 304 0154 9341     		sbc	r3, r3, r2
 305 0156 DBB2     		uxtb	r3, r3
 306 0158 002B     		cmp	r3, #0
 307 015a F3D1     		bne	.L9
 170:../Generated_Code/Cpu.c ****   }
 171:../Generated_Code/Cpu.c ****   /*** End of PE initialization code after reset ***/
 172:../Generated_Code/Cpu.c **** 
 173:../Generated_Code/Cpu.c ****   /*** !!! Here you can place your own code after PE initialization using property "User code after
 174:../Generated_Code/Cpu.c **** 
 175:../Generated_Code/Cpu.c **** }
 308              		.loc 1 175 0
 309 015c BD46     		mov	sp, r7
 310              		@ sp needed for prologue
 311 015e 80BD     		pop	{r7, pc}
 312              	.L11:
 313              		.align	2
 314              	.L10:
 315 0160 00E000E0 		.word	-536813568
 316 0164 00000000 		.word	__vect_table
 317 0168 080D0000 		.word	3336
 318 016c 00700440 		.word	1074032640
 319 0170 44100000 		.word	4164
 320 0174 38100000 		.word	4152
 321 0178 00D00740 		.word	1074253824
 322 017c 00000110 		.word	268500992
 323 0180 04100000 		.word	4100
 324 0184 FFFFFFFC 		.word	-50331649
 325 0188 00900440 		.word	1074040832
 326 018c FFF8FFFE 		.word	-16779009
 327 0190 00400640 		.word	1074151424
 328 0194 00500640 		.word	1074155520
 329              		.cfi_endproc
 330              	.LFE7:
 332              		.section	.text.PE_low_level_init,"ax",%progbits
 333              		.align	2
 334              		.global	PE_low_level_init
 335              		.code	16
 336              		.thumb_func
 338              	PE_low_level_init:
 339              	.LFB8:
 176:../Generated_Code/Cpu.c **** 
 177:../Generated_Code/Cpu.c **** 
 178:../Generated_Code/Cpu.c **** 
 179:../Generated_Code/Cpu.c **** /*
 180:../Generated_Code/Cpu.c **** ** ===================================================================
 181:../Generated_Code/Cpu.c **** **     Method      :  PE_low_level_init (component MKL25Z128LK4)
 182:../Generated_Code/Cpu.c **** **
 183:../Generated_Code/Cpu.c **** **     Description :
 184:../Generated_Code/Cpu.c **** **         Initializes beans and provides common register initialization. 
 185:../Generated_Code/Cpu.c **** **         The method is called automatically as a part of the 
 186:../Generated_Code/Cpu.c **** **         application initialization code.
 187:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
 188:../Generated_Code/Cpu.c **** ** ===================================================================
 189:../Generated_Code/Cpu.c **** */
 190:../Generated_Code/Cpu.c **** void PE_low_level_init(void)
 191:../Generated_Code/Cpu.c **** {
 340              		.loc 1 191 0
 341              		.cfi_startproc
 342 0000 80B5     		push	{r7, lr}
 343              	.LCFI6:
 344              		.cfi_def_cfa_offset 8
 345              		.cfi_offset 7, -8
 346              		.cfi_offset 14, -4
 347 0002 00AF     		add	r7, sp, #0
 348              	.LCFI7:
 349              		.cfi_def_cfa_register 7
 192:../Generated_Code/Cpu.c ****   #ifdef PEX_RTOS_INIT
 193:../Generated_Code/Cpu.c ****     PEX_RTOS_INIT();                   /* Initialization of the selected RTOS. Macro is defined by 
 350              		.loc 1 193 0
 351              	@ 193 "../Generated_Code/Cpu.c" 1
 352 0004 72B6     		cpsid i
 353              	@ 0 "" 2
 194:../Generated_Code/Cpu.c ****   #endif
 195:../Generated_Code/Cpu.c ****       /* Initialization of the SIM module */
 196:../Generated_Code/Cpu.c ****   /* PORTA_PCR4: ISF=0,MUX=7 */
 197:../Generated_Code/Cpu.c ****   PORTA_PCR4 = (uint32_t)((PORTA_PCR4 & (uint32_t)~(uint32_t)(
 354              		.loc 1 197 0
 355              		.code	16
 356 0006 314B     		ldr	r3, .L13
 198:../Generated_Code/Cpu.c ****                 PORT_PCR_ISF_MASK
 199:../Generated_Code/Cpu.c ****                )) | (uint32_t)(
 200:../Generated_Code/Cpu.c ****                 PORT_PCR_MUX(0x07)
 201:../Generated_Code/Cpu.c ****                ));                                  
 357              		.loc 1 201 0
 358 0008 304A     		ldr	r2, .L13
 197:../Generated_Code/Cpu.c ****   PORTA_PCR4 = (uint32_t)((PORTA_PCR4 & (uint32_t)~(uint32_t)(
 359              		.loc 1 197 0
 360 000a 1169     		ldr	r1, [r2, #16]
 361              		.loc 1 201 0
 362 000c 304A     		ldr	r2, .L13+4
 363 000e 0A40     		and	r2, r1
 364 0010 E021     		mov	r1, #224
 365 0012 C900     		lsl	r1, r1, #3
 366 0014 0A43     		orr	r2, r1
 367 0016 1A61     		str	r2, [r3, #16]
 202:../Generated_Code/Cpu.c ****         /* Initialization of the RCM module */
 203:../Generated_Code/Cpu.c ****   /* RCM_RPFW: RSTFLTSEL=0 */
 204:../Generated_Code/Cpu.c ****   RCM_RPFW &= (uint8_t)~(uint8_t)(RCM_RPFW_RSTFLTSEL(0x1F));                                   
 368              		.loc 1 204 0
 369 0018 2E4B     		ldr	r3, .L13+8
 370 001a 2E4A     		ldr	r2, .L13+8
 371 001c 5279     		ldrb	r2, [r2, #5]
 372 001e D2B2     		uxtb	r2, r2
 373 0020 1F21     		mov	r1, #31
 374 0022 8A43     		bic	r2, r1
 375 0024 D2B2     		uxtb	r2, r2
 376 0026 5A71     		strb	r2, [r3, #5]
 205:../Generated_Code/Cpu.c ****   /* RCM_RPFC: RSTFLTSS=0,RSTFLTSRW=0 */
 206:../Generated_Code/Cpu.c ****   RCM_RPFC &= (uint8_t)~(uint8_t)(
 207:../Generated_Code/Cpu.c ****                RCM_RPFC_RSTFLTSS_MASK |
 208:../Generated_Code/Cpu.c ****                RCM_RPFC_RSTFLTSRW(0x03)
 209:../Generated_Code/Cpu.c ****               );                                   
 377              		.loc 1 209 0
 378 0028 2A4B     		ldr	r3, .L13+8
 379 002a 2A4A     		ldr	r2, .L13+8
 380 002c 1279     		ldrb	r2, [r2, #4]
 381 002e D2B2     		uxtb	r2, r2
 382 0030 0721     		mov	r1, #7
 383 0032 8A43     		bic	r2, r1
 384 0034 D2B2     		uxtb	r2, r2
 385 0036 1A71     		strb	r2, [r3, #4]
 210:../Generated_Code/Cpu.c ****       /* Initialization of the PMC module */
 211:../Generated_Code/Cpu.c ****   /* PMC_LVDSC1: LVDACK=1,LVDIE=0,LVDRE=1,LVDV=0 */
 212:../Generated_Code/Cpu.c ****   PMC_LVDSC1 = (uint8_t)((PMC_LVDSC1 & (uint8_t)~(uint8_t)(
 213:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDIE_MASK |
 214:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDV(0x03)
 215:../Generated_Code/Cpu.c ****                )) | (uint8_t)(
 216:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDACK_MASK |
 217:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDRE_MASK
 218:../Generated_Code/Cpu.c ****                ));                                  
 386              		.loc 1 218 0
 387 0038 274B     		ldr	r3, .L13+12
 388 003a 274A     		ldr	r2, .L13+12
 389 003c 1278     		ldrb	r2, [r2]
 390 003e D2B2     		uxtb	r2, r2
 391 0040 D2B2     		uxtb	r2, r2
 392 0042 7321     		mov	r1, #115
 393 0044 8A43     		bic	r2, r1
 394 0046 D2B2     		uxtb	r2, r2
 395 0048 5021     		mov	r1, #80
 396 004a 0A43     		orr	r2, r1
 397 004c D2B2     		uxtb	r2, r2
 398 004e D2B2     		uxtb	r2, r2
 399 0050 1A70     		strb	r2, [r3]
 219:../Generated_Code/Cpu.c ****   /* PMC_LVDSC2: LVWACK=1,LVWIE=0,LVWV=0 */
 220:../Generated_Code/Cpu.c ****   PMC_LVDSC2 = (uint8_t)((PMC_LVDSC2 & (uint8_t)~(uint8_t)(
 221:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWIE_MASK |
 222:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWV(0x03)
 223:../Generated_Code/Cpu.c ****                )) | (uint8_t)(
 224:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWACK_MASK
 225:../Generated_Code/Cpu.c ****                ));                                  
 400              		.loc 1 225 0
 401 0052 214B     		ldr	r3, .L13+12
 402 0054 204A     		ldr	r2, .L13+12
 403 0056 5278     		ldrb	r2, [r2, #1]
 404 0058 D2B2     		uxtb	r2, r2
 405 005a D2B2     		uxtb	r2, r2
 406 005c 6321     		mov	r1, #99
 407 005e 8A43     		bic	r2, r1
 408 0060 D2B2     		uxtb	r2, r2
 409 0062 4021     		mov	r1, #64
 410 0064 0A43     		orr	r2, r1
 411 0066 D2B2     		uxtb	r2, r2
 412 0068 D2B2     		uxtb	r2, r2
 413 006a 5A70     		strb	r2, [r3, #1]
 226:../Generated_Code/Cpu.c ****   /* PMC_REGSC: BGEN=0,ACKISO=0,BGBE=0 */
 227:../Generated_Code/Cpu.c ****   PMC_REGSC &= (uint8_t)~(uint8_t)(
 228:../Generated_Code/Cpu.c ****                 PMC_REGSC_BGEN_MASK |
 229:../Generated_Code/Cpu.c ****                 PMC_REGSC_ACKISO_MASK |
 230:../Generated_Code/Cpu.c ****                 PMC_REGSC_BGBE_MASK
 231:../Generated_Code/Cpu.c ****                );                                   
 414              		.loc 1 231 0
 415 006c 1A4B     		ldr	r3, .L13+12
 416 006e 1A4A     		ldr	r2, .L13+12
 417 0070 9278     		ldrb	r2, [r2, #2]
 418 0072 D2B2     		uxtb	r2, r2
 419 0074 1921     		mov	r1, #25
 420 0076 8A43     		bic	r2, r1
 421 0078 D2B2     		uxtb	r2, r2
 422 007a 9A70     		strb	r2, [r3, #2]
 232:../Generated_Code/Cpu.c ****   /* SMC_PMPROT: ??=0,??=0,AVLP=0,??=0,ALLS=0,??=0,AVLLS=0,??=0 */
 233:../Generated_Code/Cpu.c ****   SMC_PMPROT = 0x00U;                  /* Setup Power mode protection register */
 423              		.loc 1 233 0
 424 007c 174B     		ldr	r3, .L13+16
 425 007e 0022     		mov	r2, #0
 426 0080 1A70     		strb	r2, [r3]
 234:../Generated_Code/Cpu.c ****   /* Common initialization of the CPU registers */
 235:../Generated_Code/Cpu.c ****   /* PORTA_PCR20: ISF=0,MUX=7 */
 236:../Generated_Code/Cpu.c ****   PORTA_PCR20 = (uint32_t)((PORTA_PCR20 & (uint32_t)~(uint32_t)(
 427              		.loc 1 236 0
 428 0082 124B     		ldr	r3, .L13
 237:../Generated_Code/Cpu.c ****                  PORT_PCR_ISF_MASK
 238:../Generated_Code/Cpu.c ****                 )) | (uint32_t)(
 239:../Generated_Code/Cpu.c ****                  PORT_PCR_MUX(0x07)
 240:../Generated_Code/Cpu.c ****                 ));                                  
 429              		.loc 1 240 0
 430 0084 114A     		ldr	r2, .L13
 236:../Generated_Code/Cpu.c ****   PORTA_PCR20 = (uint32_t)((PORTA_PCR20 & (uint32_t)~(uint32_t)(
 431              		.loc 1 236 0
 432 0086 116D     		ldr	r1, [r2, #80]
 433              		.loc 1 240 0
 434 0088 114A     		ldr	r2, .L13+4
 435 008a 0A40     		and	r2, r1
 436 008c E021     		mov	r1, #224
 437 008e C900     		lsl	r1, r1, #3
 438 0090 0A43     		orr	r2, r1
 439 0092 1A65     		str	r2, [r3, #80]
 241:../Generated_Code/Cpu.c ****   /* NVIC_IPR1: PRI_6=0 */
 242:../Generated_Code/Cpu.c ****   NVIC_IPR1 &= (uint32_t)~(uint32_t)(NVIC_IP_PRI_6(0xFF));                                   
 440              		.loc 1 242 0
 441 0094 124A     		ldr	r2, .L13+20
 442 0096 1249     		ldr	r1, .L13+20
 443 0098 C123     		mov	r3, #193
 444 009a 9B00     		lsl	r3, r3, #2
 445 009c C958     		ldr	r1, [r1, r3]
 446 009e 114B     		ldr	r3, .L13+24
 447 00a0 1940     		and	r1, r3
 448 00a2 C123     		mov	r3, #193
 449 00a4 9B00     		lsl	r3, r3, #2
 450 00a6 D150     		str	r1, [r2, r3]
 243:../Generated_Code/Cpu.c ****   /* ### FreeRTOS "FreeRTOS0" init code ... */
 244:../Generated_Code/Cpu.c **** 
 245:../Generated_Code/Cpu.c **** #if configSYSTICK_USE_LOW_POWER_TIMER
 246:../Generated_Code/Cpu.c ****   /* enable clocking for low power timer, otherwise vPortStopTickTimer() will crash */
 247:../Generated_Code/Cpu.c ****   SIM_SCGC5 |= SIM_SCGC5_LPTMR_MASK; /* SIM_SCGC5: LPTMR=1 */
 248:../Generated_Code/Cpu.c **** #endif
 249:../Generated_Code/Cpu.c ****   vPortStopTickTimer(); /* tick timer shall not run until the RTOS scheduler is started */
 451              		.loc 1 249 0
 452 00a8 FFF7FEFF 		bl	vPortStopTickTimer
 250:../Generated_Code/Cpu.c ****   /* ### I2C_LDD "I2C0" component auto initialization. Auto initialization feature can be disabled 
 251:../Generated_Code/Cpu.c ****   (void)I2C0_Init(NULL);
 453              		.loc 1 251 0
 454 00ac 0020     		mov	r0, #0
 455 00ae FFF7FEFF 		bl	I2C0_Init
 252:../Generated_Code/Cpu.c ****   /* ### GenericI2C "GI2C0" init code ... */
 253:../Generated_Code/Cpu.c ****   GI2C0_Init();
 456              		.loc 1 253 0
 457 00b2 FFF7FEFF 		bl	_Z10GI2C0_Initv
 254:../Generated_Code/Cpu.c ****   /* ### MMA8451Q "MMA0" init code ... */
 255:../Generated_Code/Cpu.c ****   /* Write code here ... */
 256:../Generated_Code/Cpu.c ****   /* ### PWM_LDD "PwmLdd1" component auto initialization. Auto initialization feature can be disabl
 257:../Generated_Code/Cpu.c ****   (void)PwmLdd1_Init(NULL);
 458              		.loc 1 257 0
 459 00b6 0020     		mov	r0, #0
 460 00b8 FFF7FEFF 		bl	PwmLdd1_Init
 258:../Generated_Code/Cpu.c ****   /* ### PWM_LDD "PwmLdd2" component auto initialization. Auto initialization feature can be disabl
 259:../Generated_Code/Cpu.c ****   (void)PwmLdd2_Init(NULL);
 461              		.loc 1 259 0
 462 00bc 0020     		mov	r0, #0
 463 00be FFF7FEFF 		bl	PwmLdd2_Init
 260:../Generated_Code/Cpu.c ****   /* ### PWM_LDD "PwmLdd3" component auto initialization. Auto initialization feature can be disabl
 261:../Generated_Code/Cpu.c ****   (void)PwmLdd3_Init(NULL);
 464              		.loc 1 261 0
 465 00c2 0020     		mov	r0, #0
 466 00c4 FFF7FEFF 		bl	PwmLdd3_Init
 262:../Generated_Code/Cpu.c **** }
 467              		.loc 1 262 0
 468 00c8 BD46     		mov	sp, r7
 469              		@ sp needed for prologue
 470 00ca 80BD     		pop	{r7, pc}
 471              	.L14:
 472              		.align	2
 473              	.L13:
 474 00cc 00900440 		.word	1074040832
 475 00d0 FFF8FFFE 		.word	-16779009
 476 00d4 00F00740 		.word	1074262016
 477 00d8 00D00740 		.word	1074253824
 478 00dc 00E00740 		.word	1074257920
 479 00e0 00E100E0 		.word	-536813312
 480 00e4 FFFF00FF 		.word	-16711681
 481              		.cfi_endproc
 482              	.LFE8:
 484              		.text
 485              	.Letext0:
 486              		.file 2 "C:/Freescale/CW MCU v10.5/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 487              		.file 3 "../Generated_Code/IO_Map.h"
 488              		.file 4 "../Generated_Code/Cpu.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Cpu.c
C:\Users\JH\AppData\Local\Temp\ccJPzy9Y.s:21     .bss.SR_reg:00000000 SR_reg
C:\Users\JH\AppData\Local\Temp\ccJPzy9Y.s:22     .bss.SR_reg:00000000 $d
C:\Users\JH\AppData\Local\Temp\ccJPzy9Y.s:27     .bss.SR_lock:00000000 SR_lock
C:\Users\JH\AppData\Local\Temp\ccJPzy9Y.s:28     .bss.SR_lock:00000000 $d
C:\Users\JH\AppData\Local\Temp\ccJPzy9Y.s:30     .text.Cpu_INT_NMIInterrupt:00000000 $t
C:\Users\JH\AppData\Local\Temp\ccJPzy9Y.s:35     .text.Cpu_INT_NMIInterrupt:00000000 Cpu_INT_NMIInterrupt
C:\Users\JH\AppData\Local\Temp\ccJPzy9Y.s:58     .text.Cpu_Interrupt:00000000 $t
C:\Users\JH\AppData\Local\Temp\ccJPzy9Y.s:63     .text.Cpu_Interrupt:00000000 Cpu_Interrupt
C:\Users\JH\AppData\Local\Temp\ccJPzy9Y.s:88     .text.__init_hardware:00000000 $t
C:\Users\JH\AppData\Local\Temp\ccJPzy9Y.s:93     .text.__init_hardware:00000000 __init_hardware
C:\Users\JH\AppData\Local\Temp\ccJPzy9Y.s:315    .text.__init_hardware:00000160 $d
C:\Users\JH\AppData\Local\Temp\ccJPzy9Y.s:333    .text.PE_low_level_init:00000000 $t
C:\Users\JH\AppData\Local\Temp\ccJPzy9Y.s:338    .text.PE_low_level_init:00000000 PE_low_level_init
C:\Users\JH\AppData\Local\Temp\ccJPzy9Y.s:474    .text.PE_low_level_init:000000cc $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
_Z13Cpu_OnNMIINT0v
__vect_table
vPortStopTickTimer
I2C0_Init
_Z10GI2C0_Initv
PwmLdd1_Init
PwmLdd2_Init
PwmLdd3_Init
